<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PSWindowsUpdate</name>
    </assembly>
    <members>
        <member name="T:PSWindowsUpdate.AddWUServiceManager">
            <summary>
            <para type="synopsis">Register a new Windows Update API Service Manager.</para>
            <para type="description">Use Add-WUServiceManager cmdlet to register new Windows Update Service Manager.</para>
            <para type="description">It's combination old 'Add-WUServiceManager' and 'Add-WUOfflineSync' functions to register online  and offline ServiceManager </para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Try register Microsoft Update Service by custom ServiceID.</para>
            
             Add-WUServiceManager -ServiceID "7971f918-a847-4430-9279-4a52d1efe18d"
              
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Register Windows Update Service Manager: 7971f918-a847-4430-9279-4a52d1efe18d" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
            
             <para>ServiceID                            IsManaged IsDefault Name</para>
             <para>---------                            --------- --------- ----</para>
             <para>7971f918-a847-4430-9279-4a52d1efe18d False     False     Microsoft Update</para>
             </code>
             </example>
             <example>
             <code>
             <para>Try register Microsoft Update service as Service Manager.</para>
            
             Add-WUServiceManager -MicrosoftUpdate
             
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Register Windows Update Service Manager: 7971f918-a847-4430-9279-4a52d1efe18d" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
            
             <para>ServiceID                            IsManaged IsDefault Name</para>
             <para>---------                            --------- --------- ----</para>
             <para>7971f918-a847-4430-9279-4a52d1efe18d False     False     Microsoft Update</para>
             </code>
             </example>
             <example>
             <code>
             <para>Try register Offline Sync Service from file C:\wsusscn2.cab.</para>
            
             Add-WUServiceManager -ScanFileLocation C:\wsusscn2.cab
              
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Register Offline Windows Update Service Manager: C:\wsusscn2.cab" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
            
             <para>ServiceID                            IsManaged IsDefault Name</para>
             <para>---------                            --------- --------- ----</para>
             <para>7e1364ef-e30e-4f4e-9c66-84194eebcbbe False     False     Offline Sync Service</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.ServiceID">
            <summary>
            <para type="description">An identifier for the service to be registered. </para>
            <para type="description">Examples Of ServiceID: 
            \r\n
            \r\n -- Windows Update 				    9482f4b4-e343-43b6-b170-9a65bc822c77
            \r\n -- Microsoft Update 				7971f918-a847-4430-9279-4a52d1efe18d
            \r\n -- Windows Store 					117cab2d-82b1-4b5a-a08c-4d62dbee7782
            \r\n -- Windows Server Update Service 	3da21691-e39d-4da6-8a4b-b43877bcb1b7</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.AddServiceFlag">
            <summary>
            <para type="description">A combination of AddServiceFlag values:
            \r\n0x1 - asfAllowPendingRegistration
            \r\n0x2 - asfAllowOnlineRegistration
            \r\n0x4 - asfRegisterServiceWithAU</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.AuthorizationCabPath">
            <summary>
            <para type="description">The path of the Microsoft signed local cabinet file (.cab) that has the information that is required for a service registration. If empty, the update agent searches for the authorization cabinet file (.cab) during service registration when a network connection is available.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.MicrosoftUpdate">
            <summary>
            <para type="description">Register Microsoft Update Service Manager - '7971f918-a847-4430-9279-4a52d1efe18d'</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.ServiceName">
            <summary>
            <para type="description">Name under which it will be registered Windows Update offline service. Default name is 'Offline Sync Service'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.ScanFileLocation">
            <summary>
            <para type="description">Path to Windows Update offline scan file (wsusscan.cab or wsusscn2.cab).</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.Silent">
            <summary>
            <para type="description">Don't return output.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AddWUServiceManager.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.AddWUServiceManager.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.AddWUServiceManager.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.AddWUServiceManager.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.AddWUServiceManager.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.EnableWURemoting">
            <summary>
            <para type="synopsis">Enable firewall rules for PSWindowsUpdate remoting.</para>
            <para type="description">Use Enable-WURemoting cmdlet to enable nessesery firewall rules for PSWindowsUpdate remoting.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Enable firewall rules for PSWindowsUpdate remoting.</para>
            
             Enable-WURemoting -Verbose
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.EnableWURemoting.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.EnableWURemoting.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.EnableWURemoting.LocalAccountTokenFilterPolicy">
            <summary>
            <para type="description">Set LocalAccountTokenFilterPolicy registry entry to builds an elevated token on the target remote computer.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.EnableWURemoting.WinRMPublic">
            <summary>
            <para type="description">Enable WinRM Public access from all subnets. Default access is only enabled from local subnet. Required for workgroup computers.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.EnableWURemoting.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.EnableWURemoting.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.EnableWURemoting.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.EnableWURemoting.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.EnableWURemoting.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWindowsUpdate_v2">
            <summary>
            <para type="synopsis">Get list of available updates meeting the criteria.</para>
            <para type="description">Use Get-WindowsUpdate (aka Get-WUList) cmdlet to get list of available or installed updates meeting specific criteria.</para>
            <para type="description">Use Download-WindowsUpdate alias to get list of updates and download it. Equivalent Get-WindowsUpdate -Download.</para>
            <para type="description">Use Install-WindowsUpdate (aka Get-WUInstall) alias to get list of updates and install it. Equivalent Get-WindowsUpdate -Install.</para>
            <para type="description">Use Hide-WindowsUpdate alias to get list of updates and hide it. Equivalent Get-WindowsUpdate -Hide.</para>
            <para type="description">Use Show-WindowsUpdate (aka UnHide-WindowsUpdate) alias to get list of updates and unhide it. Equivalent Get-WindowsUpdate -Hide:$false.</para>
            <para type="description">There are two types of filtering update: Pre search criteria, Post search criteria.</para>
            <para type="description">- Pre search works on server side, like example: (IsInstalled = 0 and IsHidden = 0 and CategoryIds contains '0fa1201d-4330-4fa8-8ae9-b877473b6441' )</para>
            <para type="description">- Post search work on client side after get the pre-filtered list of updates, like example $KBArticleID -match $Update.KBArticleIDs</para>
            <para type="description">Status info list:\r\n[A|R]DIMHUB\r\nA-IsAccetped\r\nR-IsRejected\r\n D-IsDownloaded\r\n F-DownloadFailed\r\n ?-IsInvoked\r\n  I-IsInstalled\r\n  F-InstallFailed\r\n  ?-IsInvoked\r\n  R-RebootRequired\r\n   M-IsMandatory\r\n    H-IsHidden\r\n     U-IsUninstallable\r\n      B-IsBeta</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para> 
             <example>
             <code>
             <para>Get windows updates available from default service manager.</para>
            
             Get-WindowsUpdate -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Windows Server Update Service server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[4] Updates in post search criteria</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        -------    KB890830    44MB Narzędzie Windows do usuwania złośliwego oprogramowania dla systemów Window...</para>
             <para>MG-PC        -------    KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             <para>MG-PC        -------    KB4034662   21MB 2017-08 Aktualizacja zabezpieczeń Adobe Flash Player w Windows 10 Version 1...</para>
             <para>MG-PC        -------    KB4035631   11MB 2017-08 Aktualizacja Windows 10 Version 1607 dla systemów opartych na archi...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Get all installed drivers that are available at Windows Update. Additionaly show pre search criteria.</para>
            
             Get-WindowsUpdate -WindowsUpdate -UpdateType Driver -IsInstalled -ShowPreSearchCriteria -Verbose
              
             <para>PreSearchCriteria: IsInstalled = 0 and Type = 'Driver' and IsHidden = 0</para>
             <para>VERBOSE: MG-PC: Connecting to Windows Update server.Please wait...</para>
             <para>VERBOSE: Found[1] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MGAJDALAP3   -DI----                 3MB Intel - Other hardware - Intel(R) Watchdog Timer Driver (Intel(R) WDT)</para>
             </code>
             </example>
             <example>
             <code>
             <para>Get all available update on remote machine MG-PC, that contains in Title this two words 'Aktualizacja' and 'Windows 10' (as regular expression).</para>
            
             Get-WindowsUpdate -ComputerName MG-PC -MicrosoftUpdate -Title "Aktualizacja.*Windows 10" -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[14] Updates in pre search criteria</para>
             <para>VERBOSE: Found[5] Updates in post search criteria</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        -------    KB3150513    2MB 2017-06 Aktualizacja Windows 10 Version 1607 dla systemów opartych na archi...</para>
             <para>MG-PC        -------    KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             <para>MG-PC        -------    KB4034662   21MB 2017-08 Aktualizacja zabezpieczeń Adobe Flash Player w Windows 10 Version 1...</para>
             <para>MG-PC        -------    KB4035631   11MB 2017-08 Aktualizacja Windows 10 Version 1607 dla systemów opartych na archi...</para>
             <para>MG-PC        -------    KB4033637    4MB Aktualizacja systemu Windows 10 Version 1607 dla komputerów z procesorami x...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Hide update with KBArticleID: KB4034658.</para>
            
             Get-WindowsUpdate -KBArticleID KB4034658 -Hide -Verbose
             <para>or use alias</para>
             Hide-WindowsUpdate -KBArticleID KB4034658 -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Windows Server Update Service server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Hide 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla systemów opartych na architekturze x64 (KB4034658)[1GB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        ---H--     KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Unhide update with KBArticleID: KB4034658.</para>
            
             Get-WindowsUpdate -KBArticleID KB4034658 -WithHidden -Hide:$false -Verbose 
             <para>or use alias</para>
             Show-WindowsUpdate -KBArticleID KB4034658 -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Windows Server Update Service server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Show 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla systemów opartych na architekturze x64 (KB4034658)[1GB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        ------     KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Schedule job at 6:00 PM to install update with UpdateId='ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber=200. Update will be automaticaly accepted and after all serwer will be automaticaly restarted if needed. </para>
            
             Get-WindowsUpdate -MicrosoftUpdate -UpdateID ddb74579-7a1f-4d1f-80c8-e8647055314e -RevisionNumber 200 -ScheduleJob (Get-Date -Hour 18 -Minute 0 -Second 0) -Install -AcceptAll -AutoReboot -Verbose
             <para>or use alias</para>
             Install-WindowsUpdate -MicrosoftUpdate -UpdateID ddb74579-7a1f-4d1f-80c8-e8647055314e -RevisionNumber 200 -ScheduleJob (Get-Date -Hour 18 -Minute 0 -Second 0) -AcceptAll -AutoReboot -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[1] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para>VERBOSE: Choosed pre Search Criteria: (UpdateID = 'ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber = 200)</para>
             <para></para>
             <para>X ComputerName Result     KB          Size Title</para>
             <para>- ------------ ------     --          ---- -----</para>
             <para>1 MG-PC        Accepted   KB4023307   13MB Microsoft Silverlight(KB4023307)</para>
             <para>VERBOSE: Accepted[1] Updates ready to Download</para>
             <para>VERBOSE: Invoke-WUJob: MG-PC(31.08.2017 18:00:00):</para>
             <para>VERBOSE: powershell.exe -Command "Get-WindowsUpdate -Criteria \"(UpdateID = 'ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber = 200)\" -AcceptAll -AutoReboot -Download -Install -MicrosoftUpdate -Verbose *>&amp;1 | Out-File $Env:TEMP\PSWindowsUpdate.log"</para>
             </code>
             </example>
             <example>
             <code>
             <para>Install updates on remote computer. After all send a report from the installation process.</para>
            
             Install-WindowsUpdate -ComputerName MG-PC -MicrosoftUpdate -AcceptAll -AutoReboot -SendReport -PSWUSettings @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";Port=25} -Verbose
             <para>or use global PSWUSettings</para>
             @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";Port=25} | Export-Clixml -Path 'C:\Program Files\WindowsPowerShell\Modules\PSWindowsUpdate\PSWUSettings.xml'
             Install-WindowsUpdate -ComputerName MG-PC -MicrosoftUpdate -AcceptAll -AutoReboot -SendReport -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[4] Updates in post search criteria</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Microsoft Silverlight (KB4023307)[13MB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "2017-06 Aktualizacja Windows 10 Version 1607 dla systemów opartych na architekturze x64 (KB3150513)[2MB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Aktualizacja pakietu językowego usługi Microsoft Dynamics 365 2.1[47MB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): L</para>
             <para></para>
             <para>X ComputerName Result     KB          Size Title</para>
             <para>- ------------ ------     --          ---- -----</para>
             <para>1 MG-PC Accepted KB4023307   13MB Microsoft Silverlight (KB4023307)</para>
             <para>1 MG-PC Accepted KB3150513    2MB 2017-06 Aktualizacja Windows 10 Version 1607 dla systemów opartych na arc...</para>
             <para>1 MG-PC Rejected KB4013759   47MB Aktualizacja pakietu językowego usługi Microsoft Dynamics 365 2.1</para>
             <para>1 MG-PC Rejected KB3186568   67MB Program Microsoft .NET Framework 4.7 w syst. Windows 10 Version 1607 i Wi...</para>
             <para>VERBOSE: Accepted [2]</para>
             <para>Updates ready to Download</para>
             <para>VERBOSE: Invoke-WUJob: MG-PC (Now):</para>
             <para>VERBOSE: powershell.exe -Command "Get-WindowsUpdate -Criteria \"(UpdateID = 'ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber = 200) or (UpdateID = '151c4402-513c-4f39-8da1-f84d0956b5e3' and RevisionNumber = 200)\" -AcceptAll -Download -Install -AutoReboot -MicrosoftUpdate -SendReport -ProofOfLife -Verbose *>&amp;1 | Out-File $Env:TEMP\PSWindowsUpdate.log"</para>
             </code>
             </example>
             <example>
             <code>
             <para>Schedule Job to install all available updates and automatically reboot system if needed. Also send report after installation (but before reboot if needed) and send second instalation history report after reboot.</para>
            
             @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";Port=25} | Export-Clixml -Path 'C:\Program Files\WindowsPowerShell\Modules\PSWindowsUpdate\PSWUSettings.xml'
             Install-WindowsUpdate -MicrosoftUpdate -SendReport -SendHistory -AcceptAll -AutoReboot -ScheduleJob (Get-Date -Hour 18 -Minute 30 -Second 0) -ComputerName MG-PC -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[4] Updates in post search criteria</para>
             <para></para>
             <para>X ComputerName Result     KB          Size Title</para>
             <para>- ------------ ------     --          ---- -----</para>
             <para>1 MG-PC        Accepted   KB3038936    5MB Aktualizacja systemu Windows 8.1 dla komputerów z procesorami x64(KB3038...</para>
             <para>1 MG-PC        Accepted   KB3186606    4MB Pakiety językowe programu Microsoft.NET Framework 4.7 w syst. Windows 8....</para>
             <para>1 MG-PC        Accepted   KB4035038   53MB Sierpień 2017: wersja zapozn. pak.zb.aktual.jakości dla pr. .NET Frame...</para>
             <para>1 MG-PC        Accepted   KB2267602  309MB Aktualizacja definicji dla: Windows Defender — KB2267602 (Definicja 1.251...</para>
             <para>VERBOSE: Accepted[4] Updates ready to Download</para>
             <para>VERBOSE: Invoke-WUJob: MG-PC (02.09.2017 08:30:00):</para>
             <para>VERBOSE: powershell.exe -Command "Get-WindowsUpdate -Criteria \"(UpdateID = 'e69c9679-7ce8-489a-a21c-62fb920be67a' and RevisionNumber = 201) or(UpdateID = 'de44604d-ec38-4a7f-ac63-28b3edfdb382' and RevisionNumber = 207) or(UpdateID = '9cf1d8c9-a7c3-4603-90e8-f22131ff6d7e' and RevisionNumber = 201) or(UpdateID = 'b51935f9-0e40-4624-9c26-b29bff92dcf9' and RevisionNumber = 200)\" -AcceptAll -Install -AutoReboot -MicrosoftUpdate -SendReport -SendHistory -Verbose *>&amp;1 | Out-File $Env:TEMP\PSWindowsUpdate.log"</para>
             <para>VERBOSE: Send report</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection. Interactive remote connection works only for checking updates. For download or install cmdlet creates an Invoke-WUJob task.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file (more preferred) in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.SendHistory">
            <summary>
            <para type="description">Send install history (Get-WUHistory) report after successful update installation or system startup.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.ScheduleJob">
            <summary>
            <para type="description">Specify time when job will start.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.AcceptAll">
            <summary>
            <para type="description">Do not ask confirmation for updates. Download or Install all available updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.RecurseCycle">
            <summary>
            <para type="description">Specify number of cycles for check updates after successful update installation or system startup. First run is always main cycle (-RecurseCycle 1 or none). Second (-RecurseCycle 2) and n (-RecurseCycle n) cycle are recursive.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Hide">
            <summary>
            <para type="description">Get list of updates and hide/unhide approved updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Download">
            <summary>
            <para type="description">Get list of updates and download approved updates, but do not install it.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.ForceDownload">
            <summary>
            <para type="description">Forces the download of updates that are already installed or that cannot be installed. Works only with -Download.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Install">
            <summary>
            <para type="description">Get list of updates and install approved updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.ForceInstall">
            <summary>
            <para type="description">A forced installation is an installation in which an update is installed even if the metadata indicates that the update is already installed. Before you use ForceInstall to force an installation, determine whether the update is installed and available. If an update is not installed, a forced installation fails. Works only with -Install.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.AutoReboot">
            <summary>
            <para type="description">Do not ask for reboot if it needed.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.IgnoreReboot">
            <summary>
            <para type="description">Do not ask for reboot if it needed, but do not reboot automaticaly.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.ScheduleReboot">
            <summary>
            <para type="description">Specify time when system will be rebooted.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.ServiceID">
            <summary>
            <para type="description">Use specific Service Manager if it's available. </para>
            <para type="description">Examples Of ServiceID: 
            \r\n
            \r\n -- Windows Update 				    9482f4b4-e343-43b6-b170-9a65bc822c77
            \r\n -- Microsoft Update 				7971f918-a847-4430-9279-4a52d1efe18d
            \r\n -- Windows Store 					117cab2d-82b1-4b5a-a08c-4d62dbee7782
            \r\n -- Windows Server Update Service 	3da21691-e39d-4da6-8a4b-b43877bcb1b7</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.WindowsUpdate">
            <summary>
            <para type="description">Use Microsoft Update Service Manager - '7971f918-a847-4430-9279-4a52d1efe18d'</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.MicrosoftUpdate">
            <summary>
            <para type="description">Use Windows Update Service Manager - '9482f4b4-e343-43b6-b170-9a65bc822c77'</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Criteria">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Set own string that specifies the search criteria. https://docs.microsoft.com/pl-pl/windows/desktop/api/wuapi/nf-wuapi-iupdatesearcher-search </para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.UpdateType">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates with a specific type, such as 'Driver' and 'Software'. Default value contains all updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.DeploymentAction">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are deployed for a specific action, such as an installation or uninstallation that the administrator of a server specifies. "DeploymentAction='Installation'" finds updates that are deployed for installation on a destination computer. "DeploymentAction='Uninstallation'" depends on the other query criteria.</para>
            <para type="description">"DeploymentAction='Uninstallation'" finds updates that are deployed for uninstallation on a destination computer. "DeploymentAction='Uninstallation'" depends on the other query criteria.</para>
            <para type="description">If this criterion is not explicitly specified, each group of criteria that is joined to an AND operator implies "DeploymentAction='Installation'".</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.IsAssigned">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are intended for deployment by Automatic Updates. "IsAssigned=1" finds updates that are intended for deployment by Automatic Updates, which depends on the other query criteria.At most, one assigned Windows-based driver update is returned for each local device on a destination computer.</para>
            <para type="description">"IsAssigned=0" finds updates that are not intended to be deployed by Automatic Updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.IsPresent">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. When set to 1, finds updates that are present on a computer.</para>
            <para type="description">"IsPresent=1" finds updates that are present on a destination computer.If the update is valid for one or more products, the update is considered present if it is installed for one or more of the products.</para>
            <para type="description">"IsPresent=0" finds updates that are not installed for any product on a destination computer.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.BrowseOnly">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. "BrowseOnly=1" finds updates that are considered optional. "BrowseOnly=0" finds updates that are not considered optional.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.AutoSelectOnWebSites">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates where the AutoSelectOnWebSites property has the specified value.</para>
            <para type="description">"AutoSelectOnWebSites=1" finds updates that are flagged to be automatically selected by Windows Update.</para>
            <para type="description">"AutoSelectOnWebSites=0" finds updates that are not flagged for Automatic Updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.UpdateID">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates with a specific UUID (or sets of UUIDs), such as '12345678-9abc-def0-1234-56789abcdef0'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.NotUpdateID">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates without a specific UUID (or sets of UUIDs), such as '12345678-9abc-def0-1234-56789abcdef0'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.RevisionNumber">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates with a specific RevisionNumber, such as '100'. This criterion must be combined with the UpdateID param.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.CategoryIDs">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that belong to a specified category (or sets of UUIDs), such as '0fa1201d-4330-4fa8-8ae9-b877473b6441'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.IsInstalled">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are installed on the destination computer.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.IsHidden">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are marked as hidden on the destination computer. Default search criteria is only not hidden upadates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.WithHidden">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are both hidden and not on the destination computer. Overwrite IsHidden param. Default search criteria is only not hidden upadates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.ShowPreSearchCriteria">
            <summary>
            <para type="description">Show choosen search criteria. Only works for pre search criteria.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Category">
            <summary>
            <para type="description">Post search criteria. Finds updates that contain a specified category name (or sets of categories name), such as 'Updates', 'Security Updates', 'Critical Updates', etc...</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.KBArticleID">
            <summary>
            <para type="description">Post search criteria. Finds updates that contain a KBArticleID (or sets of KBArticleIDs), such as 'KB982861'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Title">
            <summary>
            <para type="description">Post search criteria. Finds updates that match part of title (case sensitive), such as '.NET Framework 4'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Severity">
            <summary>
            <para type="description">Post search criteria. Finds updates that match part of severity, such as 'Important', 'Critical', 'Moderate', etc...</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.NotCategory">
            <summary>
            <para type="description">Post search criteria. Finds updates that not contain a specified category name (or sets of categories name), such as 'Updates', 'Security Updates', 'Critical Updates', etc...</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.NotKBArticleID">
            <summary>
            <para type="description">Post search criteria. Finds updates that not contain a KBArticleID (or sets of KBArticleIDs), such as 'KB982861'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.NotTitle">
            <summary>
            <para type="description">Post search criteria. Finds updates that not match part of title (case sensitive).</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.NotSeverity">
            <summary>
            <para type="description">Post search criteria. Finds updates that not match part of severity.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.IgnoreUserInput">
            <summary>
            <para type="description">Post search criteria. Finds updates that the installation or uninstallation of an update can't prompt for user input.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.IgnoreRebootRequired">
            <summary>
            <para type="description">Post search criteria. Finds updates that specifies the restart behavior that not occurs when you install or uninstall the update.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.AutoSelectOnly">
            <summary>
            <para type="description">Install only the updates that have status AutoSelectOnWebsites on true.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.MaxSize">
            <summary>
            <para type="description">Post search criteria. Finds updates that have MaxDownloadSize less or equal. Size is in Bytes.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.MinSize">
            <summary>
            <para type="description">Post search criteria. Finds updates that have MaxDownloadSize greater or equal. Size is in Bytes.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate_v2.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions. For additional debug information use $DebugPreference = "Continue"</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate_v2.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate_v2.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate_v2.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate_v2.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWindowsUpdate">
            <summary>
            <para type="synopsis">Get list of available updates meeting the criteria.</para>
            <para type="description">Use Get-WindowsUpdate (aka Get-WUList) cmdlet to get list of available or installed updates meeting specific criteria.</para>
            <para type="description">Use Download-WindowsUpdate alias to get list of updates and download it. Equivalent Get-WindowsUpdate -Download.</para>
            <para type="description">Use Install-WindowsUpdate (aka Get-WUInstall) alias to get list of updates and install it. Equivalent Get-WindowsUpdate -Install.</para>
            <para type="description">Use Hide-WindowsUpdate alias to get list of updates and hide it. Equivalent Get-WindowsUpdate -Hide.</para>
            <para type="description">Use Show-WindowsUpdate (aka UnHide-WindowsUpdate) alias to get list of updates and unhide it. Equivalent Get-WindowsUpdate -Hide:$false.</para>
            <para type="description">There are two types of filtering update: Pre search criteria, Post search criteria.</para>
            <para type="description">- Pre search works on server side, like example: (IsInstalled = 0 and IsHidden = 0 and CategoryIds contains '0fa1201d-4330-4fa8-8ae9-b877473b6441' )</para>
            <para type="description">- Post search work on client side after get the pre-filtered list of updates, like example $KBArticleID -match $Update.KBArticleIDs</para>
            <para type="description">Status info list:\r\n[A|R]DIMHUB\r\nA-IsAccetped\r\nR-IsRejected\r\n D-IsDownloaded\r\n F-DownloadFailed\r\n ?-IsInvoked\r\n  I-IsInstalled\r\n  F-InstallFailed\r\n  ?-IsInvoked\r\n  R-RebootRequired\r\n   M-IsMandatory\r\n    H-IsHidden\r\n     U-IsUninstallable\r\n      B-IsBeta</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para> 
             <example>
             <code>
             <para>Get windows updates available from default service manager.</para>
            
             Get-WindowsUpdate -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Windows Server Update Service server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[4] Updates in post search criteria</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        -------    KB890830    44MB Narzędzie Windows do usuwania złośliwego oprogramowania dla systemów Window...</para>
             <para>MG-PC        -------    KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             <para>MG-PC        -------    KB4034662   21MB 2017-08 Aktualizacja zabezpieczeń Adobe Flash Player w Windows 10 Version 1...</para>
             <para>MG-PC        -------    KB4035631   11MB 2017-08 Aktualizacja Windows 10 Version 1607 dla systemów opartych na archi...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Get all installed drivers that are available at Windows Update. Additionaly show pre search criteria.</para>
            
             Get-WindowsUpdate -WindowsUpdate -UpdateType Driver -IsInstalled -ShowPreSearchCriteria -Verbose
              
             <para>PreSearchCriteria: IsInstalled = 0 and Type = 'Driver' and IsHidden = 0</para>
             <para>VERBOSE: MG-PC: Connecting to Windows Update server.Please wait...</para>
             <para>VERBOSE: Found[1] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MGAJDALAP3   -DI----                 3MB Intel - Other hardware - Intel(R) Watchdog Timer Driver (Intel(R) WDT)</para>
             </code>
             </example>
             <example>
             <code>
             <para>Get all available update on remote machine MG-PC, that contains in Title this two words 'Aktualizacja' and 'Windows 10' (as regular expression).</para>
            
             Get-WindowsUpdate -ComputerName MG-PC -MicrosoftUpdate -Title "Aktualizacja.*Windows 10" -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[14] Updates in pre search criteria</para>
             <para>VERBOSE: Found[5] Updates in post search criteria</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        -------    KB3150513    2MB 2017-06 Aktualizacja Windows 10 Version 1607 dla systemów opartych na archi...</para>
             <para>MG-PC        -------    KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             <para>MG-PC        -------    KB4034662   21MB 2017-08 Aktualizacja zabezpieczeń Adobe Flash Player w Windows 10 Version 1...</para>
             <para>MG-PC        -------    KB4035631   11MB 2017-08 Aktualizacja Windows 10 Version 1607 dla systemów opartych na archi...</para>
             <para>MG-PC        -------    KB4033637    4MB Aktualizacja systemu Windows 10 Version 1607 dla komputerów z procesorami x...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Hide update with KBArticleID: KB4034658.</para>
            
             Get-WindowsUpdate -KBArticleID KB4034658 -Hide -Verbose
             <para>or use alias</para>
             Hide-WindowsUpdate -KBArticleID KB4034658 -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Windows Server Update Service server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Hide 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla systemów opartych na architekturze x64 (KB4034658)[1GB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        ---H--     KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Unhide update with KBArticleID: KB4034658.</para>
            
             Get-WindowsUpdate -KBArticleID KB4034658 -WithHidden -Hide:$false -Verbose 
             <para>or use alias</para>
             Show-WindowsUpdate -KBArticleID KB4034658 -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Windows Server Update Service server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Show 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla systemów opartych na architekturze x64 (KB4034658)[1GB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>ComputerName Status     KB          Size Title</para>
             <para>------------ ------     --          ---- -----</para>
             <para>MG-PC        ------     KB4034658    1GB 2017-08 Aktualizacja zbiorcza dla systemu Windows 10 Version 1607 dla syste...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Schedule job at 6:00 PM to install update with UpdateId='ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber=200. Update will be automaticaly accepted and after all serwer will be automaticaly restarted if needed. </para>
            
             Get-WindowsUpdate -MicrosoftUpdate -UpdateID ddb74579-7a1f-4d1f-80c8-e8647055314e -RevisionNumber 200 -ScheduleJob (Get-Date -Hour 18 -Minute 0 -Second 0) -Install -AcceptAll -AutoReboot -Verbose
             <para>or use alias</para>
             Install-WindowsUpdate -MicrosoftUpdate -UpdateID ddb74579-7a1f-4d1f-80c8-e8647055314e -RevisionNumber 200 -ScheduleJob (Get-Date -Hour 18 -Minute 0 -Second 0) -AcceptAll -AutoReboot -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[1] Updates in pre search criteria</para>
             <para>VERBOSE: Found[1] Updates in post search criteria</para>
             <para>VERBOSE: Choosed pre Search Criteria: (UpdateID = 'ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber = 200)</para>
             <para></para>
             <para>X ComputerName Result     KB          Size Title</para>
             <para>- ------------ ------     --          ---- -----</para>
             <para>1 MG-PC        Accepted   KB4023307   13MB Microsoft Silverlight(KB4023307)</para>
             <para>VERBOSE: Accepted[1] Updates ready to Download</para>
             <para>VERBOSE: Invoke-WUJob: MG-PC(31.08.2017 18:00:00):</para>
             <para>VERBOSE: powershell.exe -Command "Get-WindowsUpdate -Criteria \"(UpdateID = 'ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber = 200)\" -AcceptAll -AutoReboot -Download -Install -MicrosoftUpdate -Verbose *>&amp;1 | Out-File $Env:TEMP\PSWindowsUpdate.log"</para>
             </code>
             </example>
             <example>
             <code>
             <para>Install updates on remote computer. After all send a report from the installation process.</para>
            
             Install-WindowsUpdate -ComputerName MG-PC -MicrosoftUpdate -AcceptAll -AutoReboot -SendReport -PSWUSettings @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";Port=25} -Verbose
             <para>or use global PSWUSettings</para>
             @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";Port=25} | Export-Clixml -Path 'C:\Program Files\WindowsPowerShell\Modules\PSWindowsUpdate\PSWUSettings.xml'
             Install-WindowsUpdate -ComputerName MG-PC -MicrosoftUpdate -AcceptAll -AutoReboot -SendReport -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[4] Updates in post search criteria</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Microsoft Silverlight (KB4023307)[13MB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "2017-06 Aktualizacja Windows 10 Version 1607 dla systemów opartych na architekturze x64 (KB3150513)[2MB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Aktualizacja pakietu językowego usługi Microsoft Dynamics 365 2.1[47MB]" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): L</para>
             <para></para>
             <para>X ComputerName Result     KB          Size Title</para>
             <para>- ------------ ------     --          ---- -----</para>
             <para>1 MG-PC Accepted KB4023307   13MB Microsoft Silverlight (KB4023307)</para>
             <para>1 MG-PC Accepted KB3150513    2MB 2017-06 Aktualizacja Windows 10 Version 1607 dla systemów opartych na arc...</para>
             <para>1 MG-PC Rejected KB4013759   47MB Aktualizacja pakietu językowego usługi Microsoft Dynamics 365 2.1</para>
             <para>1 MG-PC Rejected KB3186568   67MB Program Microsoft .NET Framework 4.7 w syst. Windows 10 Version 1607 i Wi...</para>
             <para>VERBOSE: Accepted [2]</para>
             <para>Updates ready to Download</para>
             <para>VERBOSE: Invoke-WUJob: MG-PC (Now):</para>
             <para>VERBOSE: powershell.exe -Command "Get-WindowsUpdate -Criteria \"(UpdateID = 'ddb74579-7a1f-4d1f-80c8-e8647055314e' and RevisionNumber = 200) or (UpdateID = '151c4402-513c-4f39-8da1-f84d0956b5e3' and RevisionNumber = 200)\" -AcceptAll -Download -Install -AutoReboot -MicrosoftUpdate -SendReport -ProofOfLife -Verbose *>&amp;1 | Out-File $Env:TEMP\PSWindowsUpdate.log"</para>
             </code>
             </example>
             <example>
             <code>
             <para>Schedule Job to install all available updates and automatically reboot system if needed. Also send report after installation (but before reboot if needed) and send second instalation history report after reboot.</para>
            
             Set-PSWUSettings -SmtpServer smtp.office365.com -SmtpPort 587 -SmtpEnableSsl $true -SmtpSubject "PSWindowsUpdate Report" -SmtpTo mgajda@psmvp.pl -SmtpFrom mgajda@psmvp.pl -SmtpCredential (Get-Credential mgajda@psmvp.pl)
             Install-WindowsUpdate -MicrosoftUpdate -SendReport -SendHistory -AcceptAll -AutoReboot -ScheduleJob (Get-Date -Hour 18 -Minute 30 -Second 0) -ComputerName MG-PC -Verbose
              
             <para>VERBOSE: MG-PC: Connecting to Microsoft Update server. Please wait...</para>
             <para>VERBOSE: Found[4] Updates in pre search criteria</para>
             <para>VERBOSE: Found[4] Updates in post search criteria</para>
             <para></para>
             <para>X ComputerName Result     KB          Size Title</para>
             <para>- ------------ ------     --          ---- -----</para>
             <para>1 MG-PC        Accepted   KB3038936    5MB Aktualizacja systemu Windows 8.1 dla komputerów z procesorami x64(KB3038...</para>
             <para>1 MG-PC        Accepted   KB3186606    4MB Pakiety językowe programu Microsoft.NET Framework 4.7 w syst. Windows 8....</para>
             <para>1 MG-PC        Accepted   KB4035038   53MB Sierpień 2017: wersja zapozn. pak.zb.aktual.jakości dla pr. .NET Frame...</para>
             <para>1 MG-PC        Accepted   KB2267602  309MB Aktualizacja definicji dla: Windows Defender — KB2267602 (Definicja 1.251...</para>
             <para>VERBOSE: Accepted[4] Updates ready to Download</para>
             <para>VERBOSE: Invoke-WUJob: MG-PC (02.09.2017 08:30:00):</para>
             <para>VERBOSE: powershell.exe -Command "Get-WindowsUpdate -Criteria \"(UpdateID = 'e69c9679-7ce8-489a-a21c-62fb920be67a' and RevisionNumber = 201) or(UpdateID = 'de44604d-ec38-4a7f-ac63-28b3edfdb382' and RevisionNumber = 207) or(UpdateID = '9cf1d8c9-a7c3-4603-90e8-f22131ff6d7e' and RevisionNumber = 201) or(UpdateID = 'b51935f9-0e40-4624-9c26-b29bff92dcf9' and RevisionNumber = 200)\" -AcceptAll -Install -AutoReboot -MicrosoftUpdate -SendReport -SendHistory -Verbose *>&amp;1 | Out-File $Env:TEMP\PSWindowsUpdate.log"</para>
             <para>VERBOSE: Send report</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection. Interactive remote connection works only for checking updates. For download or install cmdlet creates an Invoke-WUJob task.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file (more preferred) in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.SendHistory">
            <summary>
            <para type="description">Send install history (Get-WUHistory) report after successful update installation or system startup.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.ScheduleJob">
            <summary>
            <para type="description">Specify time when job will start.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.AcceptAll">
            <summary>
            <para type="description">Do not ask confirmation for updates. Download or Install all available updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.RecurseCycle">
            <summary>
            <para type="description">Specify number of cycles for check updates after successful update installation or system startup. First run is always main cycle (-RecurseCycle 1 or none). Second (-RecurseCycle 2) and n (-RecurseCycle n) cycle are recursive.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Hide">
            <summary>
            <para type="description">Get list of updates and hide/unhide approved updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Download">
            <summary>
            <para type="description">Get list of updates and download approved updates, but do not install it.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.ForceDownload">
            <summary>
            <para type="description">Forces the download of updates that are already installed or that cannot be installed. Works only with -Download.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Install">
            <summary>
            <para type="description">Get list of updates and install approved updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.ForceInstall">
            <summary>
            <para type="description">A forced installation is an installation in which an update is installed even if the metadata indicates that the update is already installed. Before you use ForceInstall to force an installation, determine whether the update is installed and available. If an update is not installed, a forced installation fails. Works only with -Install.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.AutoReboot">
            <summary>
            <para type="description">Do not ask for reboot if it needed.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.IgnoreReboot">
            <summary>
            <para type="description">Do not ask for reboot if it needed, but do not reboot automaticaly.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.ScheduleReboot">
            <summary>
            <para type="description">Specify time when system will be rebooted.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.ServiceID">
            <summary>
            <para type="description">Use specific Service Manager if it's available. </para>
            <para type="description">Examples Of ServiceID: 
            \r\n
            \r\n -- Windows Update 				    9482f4b4-e343-43b6-b170-9a65bc822c77
            \r\n -- Microsoft Update 				7971f918-a847-4430-9279-4a52d1efe18d
            \r\n -- Windows Store 					117cab2d-82b1-4b5a-a08c-4d62dbee7782
            \r\n -- Windows Server Update Service 	3da21691-e39d-4da6-8a4b-b43877bcb1b7</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.WindowsUpdate">
            <summary>
            <para type="description">Use Microsoft Update Service Manager - '7971f918-a847-4430-9279-4a52d1efe18d'</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.MicrosoftUpdate">
            <summary>
            <para type="description">Use Windows Update Service Manager - '9482f4b4-e343-43b6-b170-9a65bc822c77'</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Criteria">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Set own string that specifies the search criteria. https://docs.microsoft.com/pl-pl/windows/desktop/api/wuapi/nf-wuapi-iupdatesearcher-search </para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.UpdateType">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates with a specific type, such as 'Driver' and 'Software'. Default value contains all updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.DeploymentAction">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are deployed for a specific action, such as an installation or uninstallation that the administrator of a server specifies. "DeploymentAction='Installation'" finds updates that are deployed for installation on a destination computer. "DeploymentAction='Uninstallation'" depends on the other query criteria.</para>
            <para type="description">"DeploymentAction='Uninstallation'" finds updates that are deployed for uninstallation on a destination computer. "DeploymentAction='Uninstallation'" depends on the other query criteria.</para>
            <para type="description">If this criterion is not explicitly specified, each group of criteria that is joined to an AND operator implies "DeploymentAction='Installation'".</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.IsAssigned">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are intended for deployment by Automatic Updates. "IsAssigned=1" finds updates that are intended for deployment by Automatic Updates, which depends on the other query criteria.At most, one assigned Windows-based driver update is returned for each local device on a destination computer.</para>
            <para type="description">"IsAssigned=0" finds updates that are not intended to be deployed by Automatic Updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.IsPresent">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. When set to 1, finds updates that are present on a computer.</para>
            <para type="description">"IsPresent=1" finds updates that are present on a destination computer.If the update is valid for one or more products, the update is considered present if it is installed for one or more of the products.</para>
            <para type="description">"IsPresent=0" finds updates that are not installed for any product on a destination computer.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.BrowseOnly">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. "BrowseOnly=1" finds updates that are considered optional. "BrowseOnly=0" finds updates that are not considered optional.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.AutoSelectOnWebSites">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates where the AutoSelectOnWebSites property has the specified value.</para>
            <para type="description">"AutoSelectOnWebSites=1" finds updates that are flagged to be automatically selected by Windows Update.</para>
            <para type="description">"AutoSelectOnWebSites=0" finds updates that are not flagged for Automatic Updates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.UpdateID">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates with a specific UUID (or sets of UUIDs), such as '12345678-9abc-def0-1234-56789abcdef0'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.NotUpdateID">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates without a specific UUID (or sets of UUIDs), such as '12345678-9abc-def0-1234-56789abcdef0'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.RevisionNumber">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates with a specific RevisionNumber, such as '100'. This criterion must be combined with the UpdateID param.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.CategoryIDs">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that belong to a specified category (or sets of UUIDs), such as '0fa1201d-4330-4fa8-8ae9-b877473b6441'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.IsInstalled">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are installed on the destination computer.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.IsHidden">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are marked as hidden on the destination computer. Default search criteria is only not hidden upadates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.WithHidden">
            <summary>
            <para type="description">Pre search criteria - native for WUAPI. Finds updates that are both hidden and not on the destination computer. Overwrite IsHidden param. Default search criteria is only not hidden upadates.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.ShowPreSearchCriteria">
            <summary>
            <para type="description">Show choosen search criteria. Only works for pre search criteria.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.RootCategories">
            <summary>
            <para type="description">Post search criteria. Finds updates that contain a specified root category name 'Critical Updates', 'Definition Updates', 'Drivers', 'Feature Packs', 'Security Updates', 'Service Packs', 'Tools', 'Update Rollups', 'Updates', 'Upgrades', 'Microsoft'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Category">
            <summary>
            <para type="description">Post search criteria. Finds updates that contain a specified category name (or sets of categories name), such as 'Updates', 'Security Updates', 'Critical Updates', etc...</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.KBArticleID">
            <summary>
            <para type="description">Post search criteria. Finds updates that contain a KBArticleID (or sets of KBArticleIDs), such as 'KB982861'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Title">
            <summary>
            <para type="description">Post search criteria. Finds updates that match part of title (case sensitive), such as '.NET Framework 4'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Severity">
            <summary>
            <para type="description">Post search criteria. Finds updates that match part of severity, such as 'Important', 'Critical', 'Moderate', etc...</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.NotCategory">
            <summary>
            <para type="description">Post search criteria. Finds updates that not contain a specified category name (or sets of categories name), such as 'Updates', 'Security Updates', 'Critical Updates', etc...</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.NotKBArticleID">
            <summary>
            <para type="description">Post search criteria. Finds updates that not contain a KBArticleID (or sets of KBArticleIDs), such as 'KB982861'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.NotTitle">
            <summary>
            <para type="description">Post search criteria. Finds updates that not match part of title (case sensitive).</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.NotSeverity">
            <summary>
            <para type="description">Post search criteria. Finds updates that not match part of severity.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.IgnoreUserInput">
            <summary>
            <para type="description">Post search criteria. Finds updates that the installation or uninstallation of an update can't prompt for user input.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.IgnoreRebootRequired">
            <summary>
            <para type="description">Post search criteria. Finds updates that specifies the restart behavior that not occurs when you install or uninstall the update.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.AutoSelectOnly">
            <summary>
            <para type="description">Install only the updates that have status AutoSelectOnWebsites on true.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.MaxSize">
            <summary>
            <para type="description">Post search criteria. Finds updates that have MaxDownloadSize less or equal. Size is in Bytes.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.MinSize">
            <summary>
            <para type="description">Post search criteria. Finds updates that have MaxDownloadSize greater or equal. Size is in Bytes.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWindowsUpdate.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions. For additional debug information use $DebugPreference = "Continue"</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWindowsUpdate.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUApiVersion">
            <summary>
            <para type="synopsis">Get Windows Update Agent version.</para>
            <para type="description">Use Get-WUAPIVersion cmdlet to get Windows Update Agent version.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Get Windows Update Agent version.</para>
            
             Get-WUAPIVersion
              
             <para>ComputerName PSWindowsUpdate ApiVersion WuapiDllVersion</para>
             <para>------------ --------------- ---------- ---------------</para>
             <para>MG-PC        2.0             8.0        10.0.14393.1670</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUApiVersion.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUApiVersion.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUApiVersion.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUApiVersion.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUApiVersion.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUApiVersion.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUApiVersion.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUApiVersion.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUApiVersion.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUHistory">
            <summary>
            <para type="synopsis">Get list of updates history.</para>
            <para type="description">Use function Get-WUHistory to get list of installed updates on specific machine.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Get Windows Update history.</para>
            
             Get-WUHistory
              
             <para>ComputerName Operationname  Date                KB        Title</para>
             <para>------------ -------------  ----                --        -----</para>
             <para>MG-PC        Installation   30.08.2017 12:03:53 KB2267602 Definition Update for Windows Defender - KB2267602(Defini...</para>
             <para>MG-PC        Installation   29.08.2017 11:49:50 KB3186568 Microsoft .NET Framework 4.7 for Windows 10 Version 1607 a...</para>
             <para>MG-PC        Installation   29.08.2017 11:30:37 KB4035631 2017-08 Update for Windows Server 2016 for x64-based Syste...</para>
             <para>MG-PC        Installation   29.08.2017 11:21:12 KB890830  Windows Malicious Software Removal Tool for Windows 8, 8.1...</para>
             <para>MG-PC        Installation   29.08.2017 07:53:36 KB2267602 Definition Update for Windows Defender - KB2267602 (Defini...</para>
             <para>MG-PC        Installation   27.08.2017 07:53:39 KB2267602 Definition Update for Windows Defender - KB2267602 (Defini...</para>
             <para>MG-PC        Installation   25.08.2017 07:54:38 KB2267602 Definition Update for Windows Defender - KB2267602 (Defini...</para>
             <para>MG-PC        Installation   23.08.2017 13:01:26 KB2267602 Definition Update for Windows Defender - KB2267602 (Defini...</para>
             <para>MG-PC        Installation   23.08.2017 12:45:45 KB4023307 Security Update for Microsoft Silverlight (KB4023307)</para>
             <para>MG-PC        Installation   23.08.2017 07:53:56 KB2267602 Definition Update for Windows Defender - KB2267602 (Defini...</para>
             </code>
             </example>
             <example>
             <code>
             <para>Get Windows Update Agent history for last 24h.</para>
            
             Get-WUHistory -MaxDate (Get-Date).AddDays(-1)
              
             <para>ComputerName Operationname  Date                KB        Title</para>
             <para>------------ -------------  ----                --        -----</para>
             <para>MG-PC        Installation   30.08.2017 12:03:53 KB2267602 Definition Update for Windows Defender - KB2267602(Defini...</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUHistory.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUHistory.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUHistory.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUHistory.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            Export-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUHistory.MaxDate">
            <summary>
            <para type="description">Filter results by date.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUHistory.Last">
            <summary>
            <para type="description">Last X history entry.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUHistory.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUHistory.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUHistory.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUHistory.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUHistory.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUInstallerStatus">
            <summary>
            <para type="synopsis">Get Windows Update Installer status.</para>
            <para type="description">Use Get-WUInstallerStatus cmdlet to show Windows Update Installer status.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Check if Windows Update Installer is busy.</para>
            
             Get-WUInstallerStatus
              
             <para>ComputerName IsBusy</para>
             <para>------------ ------</para>
             <para>MG-PC        False</para>
             </code>
             </example>
             <example>
             <code>
             <para>Check if Windows Update Installer is busy in silent mode. Return only True (isBusy) or False (isFree).</para>
            
             Get-WUInstallerStatus -Silent
              
             <para>False</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUInstallerStatus.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUInstallerStatus.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUInstallerStatus.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUInstallerStatus.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUInstallerStatus.Silent">
            <summary>
            <para type="description">Return true/false only.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUInstallerStatus.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUInstallerStatus.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUInstallerStatus.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUInstallerStatus.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUInstallerStatus.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUJob">
            <summary>
            <para type="synopsis">Get invoked WUJob.</para>
            <para type="description">Use Get-WUJob cmdlet to get invoked WUJob in Task Scheduler.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Get invoked WUJob on remote machine.</para>
            
             Get-WUJob -ComputerName MG-PC
              
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUJob.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUJob.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUJob.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUJob.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUJob.TaskName">
            <summary>
            <para type="description">Specify custom name for Task Scheduler job. Default is 'PSWindowsUpdate'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUJob.ClearExpired">
            <summary>
            <para type="description">Clear expired WUJob.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUJob.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUJob.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUJob.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUJob.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUJob.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWULastResults">
            <summary>
            <para type="synopsis">Get Windows Update results.</para>
            <para type="description">Use Get-WULastResults cmdlet to get Windows Update LastSearchSuccessDate and LastInstallationSuccessDate.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Get last Windows Update results.</para>
            
             Get-WULastResults
              
             <para>ComputerName LastSearchSuccessDate LastInstallationSuccessDate</para>
             <para>------------ --------------------- ---------------------------</para>
             <para>MG-PC        30.08.2017 14:02:11   03.07.2017 07:35:27</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWULastResults.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWULastResults.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWULastResults.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWULastResults.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWULastResults.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWULastResults.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWULastResults.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWULastResults.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWULastResults.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUOfflineMSU">
            <summary>
            <para type="synopsis">Get offline MSU package.</para>
            <para type="description">Use Get-WUOfflineMSU cmdlet to download MSU package from Microsoft Update Catalog website.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Download package for KB4551762.</para>
            PS> Get-WUOfflineMSU -KBArticleID 4551762 -Destination C:\Temp                                              
            
                Confirm
                Are you sure you want to perform this action?
                Performing the operation "(20.04.2020 14:27:17) 2020-03 Cumulative Update for Windows Server, version 1909 for
                x64-based Systems (KB4551762)[354.4 MB]" on target "DESKTOP-GCQBCBS".
                [Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): N
            
                Confirm
                Are you sure you want to perform this action?
                Performing the operation "(20.04.2020 14:27:19) 2020-03 Cumulative Update for Windows 10 Version 1909 for x64-based
                Systems(KB4551762) [354.4 MB]" on target "DESKTOP-GCQBCBS".
                [Y] Yes[A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is "Y"): Y
            
                Confirm
                Are you sure you want to perform this action?
                Performing the operation "(20.04.2020 14:27:23) 2020-03 Cumulative Update for Windows 10 Version 1903 for x64-based
                Systems(KB4551762) [354.4 MB]" on target "DESKTOP-GCQBCBS".
                [Y] Yes[A]Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is "Y"): L
            
                X Result     Title                                                                                 LastUpdated     Size
                - ------     -----                                                                                 -----------     ----
                1 Rejected   2020-03 Cumulative Update for Windows Server, version 1909 for x64-based Systems (... 3/12/2020   354.4 MB
                1 Accepted   2020-03 Cumulative Update for Windows 10 Version 1909 for x64-based Systems (KB455... 3/12/2020   354.4 MB
                1 Rejected   2020-03 Cumulative Update for Windows 10 Version 1903 for x64-based Systems (KB455... 3/12/2020   354.4 MB
                1 Rejected   2020-03 Cumulative Update for Windows 10 Version 1909 for x86-based Systems (KB455... 3/12/2020   191.7 MB
                1 Rejected   2020-03 Cumulative Update for Windows 10 Version 1903 for x86-based Systems (KB455... 3/12/2020   191.7 MB
                1 Rejected   2020-03 Cumulative Update for Windows 10 Version 1909 for ARM64-based Systems (KB4... 3/12/2020   396.1 MB
                1 Rejected   2020-03 Cumulative Update for Windows Server, version 1903 for x64-based Systems (... 3/12/2020   354.4 MB
                1 Rejected   2020-03 Cumulative Update for Windows 10 Version 1903 for ARM64-based Systems (KB4... 3/12/2020   396.1 MB
                2 Downloaded 2020-03 Cumulative Update for Windows 10 Version 1909 for x64-based Systems (KB455... 3/12/2020   354.4 MB
            
            PS> Get-ChildItem C:\Temp
                Directory: C:\Temp
            
                Mode                LastWriteTime         Length    Name
                ----                -------------         ------    ----
                -a----              12.03.2020 07:03      371656774 windows10.0-kb4551762-x64_dacef156c781f2018d94d5a5286076610ba97279.msu
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.KBArticleID">
            <summary>
            <para type="description">Finds updates that contain a KBArticleID.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.Destination">
            <summary>
            <para type="description">Destination for downloaded files.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUOfflineMSU.AcceptAll">
            <summary>
            <para type="description">Do not ask confirmation for download updates.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUOfflineMSU.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUOfflineMSU.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUOfflineMSU.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUOfflineMSU.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWURebootStatus">
            <summary>
            <para type="synopsis">Get Windows Update reboot status.</para>
            <para type="description">Use Get-WURebootStatus cmdlet to check if reboot is needed.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Check if restart is necessary. If yes, ask to do this or don't.</para>
            
             Get-WURebootStatus 
              
             <para>Reboot is required. Do it now ? [Y/N] (default is 'N')</para>
             <para>ComputerName RebootRequired RebootScheduled</para>
             <para>------------ -------------- ---------------</para>
             <para>MG-PC        True</para>
             </code>
             </example>
             <example>
             <code>
             <para>Check if restart is necessary. If yes, then shedule it.</para>
            
             Get-WURebootStatus -ScheduleReboot (Get-Date -Hour 18 -Minute 0 -Second 0)
              
             <para>ComputerName RebootRequired RebootScheduled</para>
             <para>------------ -------------- ---------------</para>
             <para>MG-PC        True           31.08.2017 18:00:00</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.Silent">
            <summary>
            <para type="description">Return true/false only.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.AutoReboot">
            <summary>
            <para type="description">Do not ask for reboot if it needed, but do it now.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.ScheduleReboot">
            <summary>
            <para type="description">Specify schedule time for reboot.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.CancelReboot">
            <summary>
            <para type="description">Cancel scheduled reboot.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWURebootStatus.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWURebootStatus.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWURebootStatus.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWURebootStatus.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWURebootStatus.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUServiceManager">
            <summary>
            <para type="synopsis">Get Service Manager configuration.</para>
            <para type="description">Use Get-WUServiceManager cmdlet to get available configuration of update services.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Check currently available Windows Update Services on machine.</para>
            
             Get-WUServiceManager 
              
             <para>ServiceID                            IsManaged IsDefault Name</para>
             <para>---------                            --------- --------- ----</para>
             <para>9482f4b4-e343-43b6-b170-9a65bc822c77 False     False     Windows Update</para>
             <para>7971f918-a847-4430-9279-4a52d1efe18d False     False     Microsoft Update</para>
             <para>3da21691-e39d-4da6-8a4b-b43877bcb1b7 True      True      Windows Server Update Service</para>
             <para>13df3d8f-78d7-4eb8-bb9c-2a101870d350 False     False     Offline Sync Service2</para>
             <para>a8f3b5e6-fb1f-4814-a047-2257d39c2460 False     False     Offline Sync Service</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUServiceManager.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUServiceManager.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUServiceManager.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUServiceManager.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUServiceManager.ServiceID">
            <summary>
            <para type="description">Get specific Service Manager if it's available.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUServiceManager.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUServiceManager.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUServiceManager.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUServiceManager.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUServiceManager.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUSettings">
            <summary>
            <para type="synopsis">Get Windows Update Client settings.</para>
            <para type="description">Use Get-WUSettings cmdlet to get current configuration of Windows Update Client.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Get current Windows Update Client configuration.</para>
            
             Get-WUSettings 
              
             <para>ComputerName                  : MG-PC</para>
             <para>AcceptTrustedPublisherCerts   : 0</para>
             <para>WUServer                      : https://wsus.commandlinegeeks.com</para>
             <para>WUStatusServer                : https://wsus.commandlinegeeks.com</para>
             <para>DetectionFrequencyEnabled     : 1</para>
             <para>DetectionFrequency            : 2</para>
             <para>NoAutoRebootWithLoggedOnUsers : 1</para>
             <para>RebootRelaunchTimeoutEnabled  : 1</para>
             <para>RebootRelaunchTimeout         : 240</para>
             <para>IncludeRecommendedUpdates     : 0</para>
             <para>NoAutoUpdate                  : 0</para>
             <para>AUOptions                     : 2 - Notify before download</para>
             <para>ScheduledInstallDay           : 0 - Every Day</para>
             <para>ScheduledInstallTime          : 4</para>
             <para>UseWUServer                   : 1</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUSettings.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUSettings.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUSettings.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUSettings.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUSettings.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUSettings.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUSettings.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUSettings.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUSettings.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.GetWUTest">
            <summary>
            <para type="synopsis">Test cmdlet.</para>
            <para type="description">Use Get-WUTest cmdlet to test.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Test.</para>
            
             Get-WUTest
              
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.GetWUTest.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUTest.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUTest.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUTest.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUTest.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.GetWUTest.TestParam">
            <summary>
            <para type="description">Test parameter.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUTest.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUTest.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUTest.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.GetWUTest.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.InvokeWUJob">
            <summary>
            <para type="synopsis">Invoke WUJobs by Task Schduler.</para>
            <para type="description">Use Invoke-WUJobs cmdlet to invoke PSWindowsUpdate actions remotly. It Based on TaskScheduler because CreateUpdateDownloader() and CreateUpdateInstaller() methods can't be called from a remote computer - E_ACCESSDENIED.</para>
            <para type="description">Note: Because we do not have the ability to interact, is recommended use -AcceptAll for Install-WindowsUpdate.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Invoke Install-WindowsUpdate on remote machine today at 6:00 PM.</para>
            
             Invoke-WUJob -ComputerName MG-PC -Script "ipmo PSWindowsUpdate; Install-WindowsUpdate -AcceptAll | Out-File C:\PSWindowsUpdate.log" -TriggerDate (Get-Date -Hour 18 -Minute 0 -Second 0)
              
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Invoke WU job: powershell.exe -Command "ipmo PSWindowsUpdate; Install-WindowsUpdate -AcceptAll | Out-File C:\PSWindowsUpdate.log"" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.TaskName">
            <summary>
            <para type="description">Specify custom name for Task Scheduler job. Default is 'PSWindowsUpdate'.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.Hidden">
            <summary>
            <para type="description">Specify if task must be hidden. Default is true.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.EndBoundary">
            <summary>
            <para type="description">Specify EndBoundary for Task Scheduler trigger.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.TriggerDate">
            <summary>
            <para type="description">Specify Time trigger for Task Scheduler job.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.TriggerAtStart">
            <summary>
            <para type="description">Specify system startup trigger for Task Scheduler job.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.RunNow">
            <summary>
            <para type="description">Run Task Scheduler job immediately.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.Script">
            <summary>
            <para type="description">Specify PowerShell script that you what to run. Default is {ipmo PSWindowsUpdate; Get-WindowsUpdate -AcceptAll -Install | Out-File $Env:TEMP\PSWindowsUpdate.log}</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.Force">
            <summary>
            <para type="description">Force update old Task Scheduler Job if it's available.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InvokeWUJob.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.InvokeWUJob.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.InvokeWUJob.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.InvokeWUJob.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.InvokeWUJob.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUBits.StartBitsTransfer(System.String,System.String)">
            <summary>
            Download files from url using BITS.
            </summary>
            <param name="Source">Source URL</param>
            <param name="Destination">Destination path</param>
        </member>
        <member name="T:PSWindowsUpdate.WindowsUpdate">
            <summary>
            OutputType
            <para type="description">OutputType for WindowsUpdate objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.WindowsUpdate.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.WindowsUpdate.Status">
            <summary>Status</summary>
        </member>
        <member name="P:PSWindowsUpdate.WindowsUpdate.KB">
            <summary>KB</summary>
        </member>
        <member name="P:PSWindowsUpdate.WindowsUpdate.Size">
            <summary>Size</summary>
        </member>
        <member name="P:PSWindowsUpdate.WindowsUpdate.Title">
            <summary>Title</summary>
        </member>
        <member name="T:PSWindowsUpdate.AgentInfo">
            <summary>
            OutputType
            <para type="description">OutputType for AgentInfo objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.AgentInfo.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.AgentInfo.ApiVersion">
            <summary>ApiVersion</summary>
        </member>
        <member name="P:PSWindowsUpdate.AgentInfo.WuapiDll">
            <summary>WuapiDll</summary>
        </member>
        <member name="T:PSWindowsUpdate.History">
            <summary>
            OutputType
            <para type="description">OutputType for History objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.History.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.History.Operationname">
            <summary>Operationname</summary>
        </member>
        <member name="P:PSWindowsUpdate.History.Date">
            <summary>Date</summary>
        </member>
        <member name="P:PSWindowsUpdate.History.KB">
            <summary>KB</summary>
        </member>
        <member name="P:PSWindowsUpdate.History.Title">
            <summary>Title</summary>
        </member>
        <member name="T:PSWindowsUpdate.InstallerStatus">
            <summary>
            OutputType
            <para type="description">OutputType for InstallerStatus objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.InstallerStatus.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.InstallerStatus.IsBusy">
            <summary>IsBusy</summary>
        </member>
        <member name="T:PSWindowsUpdate.WUJob">
            <summary>
            OutputType
            <para type="description">OutputType for WUJob.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.WUJob.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUJob.Name">
            <summary>Name</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUJob.Action">
            <summary>Action</summary>
        </member>
        <member name="T:PSWindowsUpdate.LastResults">
            <summary>
            OutputType
            <para type="description">OutputType for LastResult objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.LastResults.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.LastResults.LastSearchSuccessDate">
            <summary>LastSearchSuccessDate</summary>
        </member>
        <member name="P:PSWindowsUpdate.LastResults.LastInstallationSuccessDate">
            <summary>LastInstallationSuccessDate</summary>
        </member>
        <member name="T:PSWindowsUpdate.OfflineMSU">
            <summary>
            OutputType
            <para type="description">OutputType for MSU objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.OfflineMSU.Status">
            <summary>Status</summary>
        </member>
        <member name="P:PSWindowsUpdate.OfflineMSU.Title">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.OfflineMSU.Product">
            <summary>KB</summary>
        </member>
        <member name="P:PSWindowsUpdate.OfflineMSU.LastUpdated">
            <summary>Size</summary>
        </member>
        <member name="P:PSWindowsUpdate.OfflineMSU.Size">
            <summary>Title</summary>
        </member>
        <member name="T:PSWindowsUpdate.RebootStatus">
            <summary>
            OutputType
            <para type="description">OutputType for RebootStatus objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RebootStatus.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.RebootStatus.RebootRequired">
            <summary>RebootRequired</summary>
        </member>
        <member name="P:PSWindowsUpdate.RebootStatus.RebootScheduled">
            <summary>RebootScheduled</summary>
        </member>
        <member name="T:PSWindowsUpdate.ServiceManager">
            <summary>
            OutputType
            <para type="description">OutputType for ServiceManager objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.ServiceManager.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.ServiceManager.Name">
            <summary>Name</summary>
        </member>
        <member name="P:PSWindowsUpdate.ServiceManager.ServiceID">
            <summary>ServiceID</summary>
        </member>
        <member name="P:PSWindowsUpdate.ServiceManager.IsManaged">
            <summary>IsManaged</summary>
        </member>
        <member name="P:PSWindowsUpdate.ServiceManager.IsDefaultAUService">
            <summary>IsDefaultAUService</summary>
        </member>
        <member name="T:PSWindowsUpdate.WUSettings">
            <summary>
            OutputType
            <para type="description">OutputType for WUSettings objects.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.AcceptTrustedPublisherCerts">
            <summary>AcceptTrustedPublisherCerts</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.WUServer">
            <summary>WUServer</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.WUStatusServer">
            <summary>WUStatusServer</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.DetectionFrequencyEnabled">
            <summary>DetectionFrequencyEnabled</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.DetectionFrequency">
            <summary>DetectionFrequency</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.NoAutoRebootWithLoggedOnUsers">
            <summary>NoAutoRebootWithLoggedOnUsers</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.RebootRelaunchTimeoutEnabled">
            <summary>RebootRelaunchTimeoutEnabled</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.RebootRelaunchTimeout">
            <summary>RebootRelaunchTimeout</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.IncludeRecommendedUpdates">
            <summary>IncludeRecommendedUpdates</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.NoAutoUpdate">
            <summary>NoAutoUpdate</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.AUOptions">
            <summary>AUOptions</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.ScheduledInstallDay">
            <summary>ScheduledInstallDay</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.ScheduledInstallTime">
            <summary>ScheduledInstallTime</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUSettings.UseWUServer">
            <summary>UseWUServer</summary>
        </member>
        <member name="T:PSWindowsUpdate.WUImpersonator">
            <summary>
            Impersonation of a user. Allows to execute code under another user context.
            Please note that the account that instantiates the Impersonator class
            needs to have the 'Act as part of operating system' privilege set.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUImpersonator.#ctor(PSWindowsUpdate.WUImpersonator.BuiltinUser)">
            <summary>
            Initializes a new instance of the <see cref="T:PSWindowsUpdate.WUImpersonator"/> class and
            impersonates as a built in service account.
            </summary>
            <param name="builtinUser">The built in user to impersonate - either
            Local Service or Network Service. These users can only be impersonated
            by code running as System.</param>
        </member>
        <member name="M:PSWindowsUpdate.WUImpersonator.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PSWindowsUpdate.WUImpersonator"/> class and
            impersonates with the specified credentials.
            </summary>
            <param name="username">his is the name of the user account to log on 
            to. If you use the user principal name (UPN) format, 
            user@DNS_domain_name, the lpszDomain parameter must be <c>null</c>.</param>
            <param name="domain">The name of the domain or server whose account 
            database contains the lpszUsername account. If this parameter is 
            <c>null</c>, the user name must be specified in UPN format. If this 
            parameter is ".", the function validates the account by using only the 
            local account database.</param>
            <param name="password">The plaintext password for the user account.</param>
        </member>
        <member name="M:PSWindowsUpdate.WUImpersonator.#ctor(System.String,System.String,System.String,PSWindowsUpdate.WUImpersonator.LogonSessionType,PSWindowsUpdate.WUImpersonator.LogonProvider,PSWindowsUpdate.WUImpersonator.BuiltinUser)">
            <summary>
            Constructor. Starts the impersonation with the given credentials.
            Please note that the account that instantiates the Impersonator class
            needs to have the 'Act as part of operating system' privilege set.
            </summary>
            <param name="userName">The name of the user to act as.</param>
            <param name="domainName">The domain name of the user to act as.</param>
            <param name="password">The password of the user to act as.</param>
            <param name="logonType">Logon Session Type</param>
            <param name="logonProvider">Logon Provider</param>
            <param name="builtinUser">Builtin User</param>
        </member>
        <member name="M:PSWindowsUpdate.WUImpersonator.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.WUImpersonator.LogonSessionType">
            <summary>
            Specifies the type of login session used.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.Interactive">
            <summary>
            Intended for users who are interactively using the machine, such as a user being logged on by a terminal server, remote shell, or similar process.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.Network">
            <summary>
            Intended for high-performance servers to authenticate clear text passwords. LogonUser does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.Batch">
            <summary>
            Intended for batch servers, where processes can be executed on behalf of a user without their direct intervention; or for higher performance servers that process many clear-text authentication attempts at a time, such as mail or web servers. LogonUser does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.Service">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.Proxy">
            <summary>
            Indicates a proxy-type logon.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.Unlock">
            <summary>
            This logon type is intended for GINA DLLs logging on users who are interactively using the machine. This logon type allows a unique audit record to be generated that shows when the workstation was unlocked.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.NetworkCleartext">
            <summary>
            Preserves the name and password in the authentication packages, allowing the server to make connections to other network servers while impersonating the client. This allows a server to accept clear text credentials from a client, call LogonUser, verify that the user can access the system across the network, and still communicate with other servers.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.NewCredentials">
            <summary>
            Allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identify, but uses different credentials for other network connections.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.RemoteInteractive">
            <summary>
            Terminal Services session that is both remote and interactive.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.CachedInteractive">
            <summary>
            Attempt cached credentials without accessing the network.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.CachedRemoteInteractive">
            <summary>
            Same as RemoteInteractive. This is used for internal auditing.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonSessionType.CachedUnlock">
            <summary>
            Workstation logon.
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.WUImpersonator.LogonProvider">
            <summary>
            Specifies the logon provider.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonProvider.Default">
            <summary>
            Use the standard logon provider for the system. The default security provider is negotiate, unless you pass NULL for the domain name and the user name is not in UPN format. In this case, the default provider is NTLM.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonProvider.WinNT35">
            <summary>
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonProvider.WinNT40">
            <summary>
            Use the NTLM logon provider.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.LogonProvider.WinNT50">
            <summary>
            Use the negotiate logon provider. 
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.WUImpersonator.ImpersonationLevel">
            <summary>
            Specifies the impersonation level.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.ImpersonationLevel.Anonymous">
            <summary>
            The client is anonymous to the server. The server process can impersonate the client, but the impersonation token does not contain any information about the client. This level is only supported over the local interprocess communication transport. All other transports silently promote this level to identify.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.ImpersonationLevel.Identify">
            <summary>
            The system default level. The server can obtain the client's identity, and the server can impersonate the client to do ACL checks. 
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.ImpersonationLevel.Impersonate">
            <summary>
            The server can impersonate the client's security context while acting on behalf of the client. The server can access local resources as the client. If the server is local, it can access network resources as the client. If the server is remote, it can access only resources that are on the same computer as the server.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.ImpersonationLevel.Delegate">
            <summary>
            The most powerful impersonation level. When this level is selected, the server (whether local or remote) can impersonate the client's security context while acting on behalf of the client. During impersonation, the client's credentials (both local and network) can be passed to any number of computers. 
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.WUImpersonator.BuiltinUser">
            <summary>
            Specifies the BuiltinUser type.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.BuiltinUser.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.BuiltinUser.LocalService">
            <summary>
            Local Service.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUImpersonator.BuiltinUser.NetworkService">
            <summary>
            Network Service.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUImpersonator.ImpersonateValidUser(System.String,System.String,System.String,PSWindowsUpdate.WUImpersonator.LogonSessionType,PSWindowsUpdate.WUImpersonator.LogonProvider)">
            <summary>
            Does the actual impersonation.
            </summary>
            <param name="userName">The name of the user to act as.</param>
            <param name="domainName">The domain name of the user to act as.</param>
            <param name="password">The password of the user to act as.</param>
            <param name="logonType">Logon Session Type</param>
            <param name="logonProvider">Logon Provider</param>
        </member>
        <member name="M:PSWindowsUpdate.WUImpersonator.UndoImpersonation">
            <summary>
            Reverts the impersonation.
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.CredentialType">
            <summary>
                Enum CredentialType
            
                The type of the credential. This member cannot be changed after the credential is created.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.CredentialType.None">
            <summary>
                The lack of credential type
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.CredentialType.Generic">
            <summary>
                Generic credential type
            
                The credential is a generic credential. The credential will not be used by any particular authentication package. 
                The credential will be stored securely but has no other significant characteristics.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.CredentialType.DomainPassword">
            <summary>
                Domain password credential type
            
                The credential is a password credential and is specific to Microsoft's authentication packages. 
                The NTLM, Kerberos, and Negotiate authentication packages will automatically use this credential when connecting to the named target.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.CredentialType.DomainCertificate">
            <summary>
                Domain certificate credential type
            
                The credential is a certificate credential and is specific to Microsoft's authentication packages. 
                The Kerberos, Negotiate, and Schannel authentication packages automatically use this credential when connecting to the named target.
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.PersistenceType">
            <summary>
                Wrapper for advapi32.dll library.
                Advanced Services
                Provide access to functionality additional to the kernel.
                Included are things like the Windows registry, shutdown/restart the system (or abort),
                start/stop/create a Windows service, manage user accounts.
                These functions reside in advapi32.dll on 32-bit Windows.
            </summary>
            <summary>
                Enum PersistenceType
                Defines the persistence of this credential. This member can be read and written.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.PersistenceType.Session">
            <summary>
                The session persistence type
                The credential persists for the life of the logon session.
                It will not be visible to other logon sessions of this same user.
                It will not exist after this user logs off and back on.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.PersistenceType.LocalComputer">
            <summary>
                The local computer persistence type
                The credential persists for all subsequent logon sessions on this same computer.
                It is visible to other logon sessions of this same user on this same computer
                and not visible to logon sessions for this user on other computers.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.PersistenceType.Enterprise">
            <summary>
                The enterprise persistence type
                The credential persists for all subsequent logon sessions on this same computer. It is visible to other logon
                sessions of this same user on this same computer and to logon sessions for this user on other computers.
                this option can be implemented as locally persisted credential if the administrator or user configures the user
                account to not have roam-able state. For instance, if the user has no roaming profile, the credential will only
                persist locally.
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.NativeMethods">
            <summary/>
        </member>
        <member name="M:PSWindowsUpdate.NativeMethods.CredRead(System.String,PSWindowsUpdate.CredentialType,System.Int32,System.IntPtr@)">
            <summary>
                The CredRead function reads a credential from the user's credential set.
                The credential set used is the one associated with the logon session of the current token.
                The token must not have the user's SID disabled.
            </summary>
            <remarks>
                If the value of the Type member of the CREDENTIAL structure specified by the Credential parameter is
                CRED_TYPE_DOMAIN_EXTENDED, a namespace must be specified in the target name. This function can return only one
                credential of the specified type.
            </remarks>
            <param name="target">Pointer to a null-terminated string that contains the name of the credential to read.</param>
            <param name="type">Type of the credential to read. Type must be one of the CRED_TYPE_* defined types.</param>
            <param name="reservedFlag">Currently reserved and must be zero.</param>
            <param name="credentialPtr">
                Pointer to a single allocated block buffer to return the credential.
                Any pointers contained within the buffer are pointers to locations within this single allocated block.
                The single returned buffer must be freed by calling CredFree.
            </param>
            <returns>The function returns TRUE on success and FALSE on failure.</returns>
        </member>
        <member name="M:PSWindowsUpdate.NativeMethods.CredWrite(PSWindowsUpdate.NativeMethods.CREDENTIAL@,System.UInt32)">
            <summary>
                The CredWrite function creates a new credential or modifies an existing credential in the user's credential set.
                The new credential is associated with the logon session of the current token.
                The token must not have the user's security identifier (SID) disabled.
            </summary>
            <remarks>
                This function creates a credential if a credential with the specified TargetName and Type does not exist. If a
                credential with the specified TargetName and Type exists, the new specified credential replaces the existing one.
                When this function writes a CRED_TYPE_CERTIFICATE credential, the Credential->CredentialBlob member specifies the
                PIN protecting the private key of the certificate specified by the Credential->UserName member. The credential
                manager does not maintain the PIN. Rather, the PIN is passed to the cryptographic service provider (CSP) indicated
                on the certificate for later use by the CSP and the authentication packages. The CSP defines the lifetime of the
                PIN. Most CSPs flush the PIN when the smart card removal from the smart card reader.
                If the value of the Type member of the CREDENTIAL structure specified by the Credential parameter is
                CRED_TYPE_DOMAIN_EXTENDED, a namespace must be specified in the target name. This function does not support writing
                to target names that contain wildcards.
            </remarks>
            <param name="userCredential">A pointer to the CREDENTIAL structure to be written.</param>
            <param name="flags">Flags that control the function's operation. The following flag is defined.</param>
            <returns>If the function succeeds, the function returns TRUE, if the function fails, it returns FALSE. </returns>
        </member>
        <member name="M:PSWindowsUpdate.NativeMethods.CredFree(System.IntPtr)">
            <summary>
                The CredFree function frees a buffer returned by any of the credentials management functions.
            </summary>
            <param name="cred">Pointer to the buffer to be freed.</param>
        </member>
        <member name="M:PSWindowsUpdate.NativeMethods.CredDelete(System.Text.StringBuilder,PSWindowsUpdate.CredentialType,System.Int32)">
            <summary>
                The CredDelete function deletes a credential from the user's credential set.
                The credential set used is the one associated with the logon session of the current token.
                The token must not have the user's SID disabled.
            </summary>
            <param name="target">Pointer to a null-terminated string that contains the name of the credential to delete.</param>
            <param name="type">
                Type of the credential to delete. Must be one of the CRED_TYPE_* defined types.
                For a list of the defined types, see the Type member of the CREDENTIAL structure.
                If the value of this parameter is CRED_TYPE_DOMAIN_EXTENDED,
                this function can delete a credential that specifies a user name when there are multiple credentials for the same
                target. The value of the TargetName parameter must specify the user name as Target|UserName.
            </param>
            <param name="flags">Reserved and must be zero.</param>
            <returns>The function returns TRUE on success and FALSE on failure.</returns>
        </member>
        <member name="M:PSWindowsUpdate.NativeMethods.CredEnumerate(System.String,System.Int32,System.Int32@,System.IntPtr@)">
             <summary>
             Enumerate credentials in the credential store
             signature: BOOL CredEnumerate (
              _In_ LPCTSTR     Filter,
              _In_ DWORD       Flags,
              _Out_ DWORD       *Count,
              _Out_ PCREDENTIAL **Credentials
            );
             <param name="filter">[in] 
             Pointer to a null-terminated string that contains the filter for the returned credentials.Only credentials with a TargetName matching the filter will be returned.The filter specifies a name prefix followed by an asterisk.For instance, the filter "FRED*" will return all credentials with a TargetName beginning with the string "FRED".
             If NULL is specified, all credentials will be returned.</param>
             <param name="flag">[in]        
             The value of this parameter can be zero or more of the following values combined with a bitwise-OR operation.
              Value Meaning
              CRED_ENUMERATE_ALL_CREDENTIALS 0x1
              This function enumerates all of the credentials in the user's credential set. The target name of each credential is returned in the "namespace:attribute=target" format. If this flag is set and the Filter parameter is not NULL, the function fails and returns ERROR_INVALID_FLAGS.
              Windows Server 2003 and Windows XP:  This flag is not supported.
            </param>
             <param name="count">[out] Count of the credentials returned in the Credentials array.</param>
             <param name="pCredentials"> [out]      
              Pointer to an array of pointers to credentials.The returned credential is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block.The single returned buffer must be freed by calling CredFree.
              Return value
             </param>
             <returns>
             The function returns TRUE on success and FALSE on failure. The GetLastError function can be called to get a more specific status code.The following status codes can be returned.
              Return code/value Description
              ERROR_NOT_FOUND
              1168 (0x490)
              No credential exists matching the specified Filter.
              ERROR_NO_SUCH_LOGON_SESSION
              1312 (0x520)
              The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.
              ERROR_INVALID_FLAGS
              1004 (0x3EC)
              A flag that is not valid was specified for the Flags parameter, or CRED_ENUMERATE_ALL_CREDENTIALS is specified for the Flags parameter and the Filter parameter is not NULL.
             </returns>
             </summary>
        </member>
        <member name="T:PSWindowsUpdate.NativeMethods.CREDENTIAL">
            <summary>
            The CREDENTIAL structure contains an individual credential.
            
            See CREDENTIAL structure <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa374788(v=vs.85).aspx">documentation.</see>
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.Credential">
            <summary>
                Class Credential, wrapper for native CREDENTIAL structure.
                See CREDENTIAL structure
                <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa374788(v=vs.85).aspx">documentation.</see>
                See Credential Manager
                <see href="http://windows.microsoft.com/en-us/windows7/what-is-credential-manager">documentation.</see>
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.LockObject">
            <summary>
                The lock object
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.UnmanagedCodePermission">
            <summary>
                The unmanaged code permission
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.description">
            <summary>
                The credential description
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.disposed">
            <summary>
                The disposed flag
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.lastWriteTime">
            <summary>
                The last write time
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.password">
            <summary>
                The password
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.persistenceType">
            <summary>
                The persistence type
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.target">
            <summary>
                The string that contains the name of the credential
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.type">
            <summary>
                The credential type
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.Credential.username">
            <summary>
                The username
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.Credential.#cctor">
            <summary>
                Initializes UnmanagedCodePermission for the <see cref="T:PSWindowsUpdate.Credential" /> class.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.Credential.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:PSWindowsUpdate.Credential" /> class.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.Credential.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:PSWindowsUpdate.Credential" /> class.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="M:PSWindowsUpdate.Credential.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:PSWindowsUpdate.Credential" /> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:PSWindowsUpdate.Credential.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:PSWindowsUpdate.Credential" /> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="target">The string that contains the name of the credential.</param>
        </member>
        <member name="M:PSWindowsUpdate.Credential.#ctor(System.String,System.String,System.String,PSWindowsUpdate.CredentialType)">
            <summary>
                Initializes a new instance of the <see cref="T:PSWindowsUpdate.Credential" /> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="target">The string that contains the name of the credential.</param>
            <param name="type">The credential type.</param>
        </member>
        <member name="P:PSWindowsUpdate.Credential.Username">
            <summary>
                Gets or sets the username.
            </summary>
            <value>The user name of the account used to connect to TargetName.</value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.Password">
            <summary>
                Gets or sets the password.
            </summary>
            <value>The decoded secure string password.</value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.SecurePassword">
            <summary>
                Gets or sets the secure password.
            </summary>
            <value>The secure password of the account used to connect to TargetName.</value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.Target">
            <summary>
                Gets or sets the target.
            </summary>
            <value>
                The name of the credential. The TargetName and Type members uniquely identify the credential. This member cannot
                be changed after the credential is created. Instead, the credential with the old name should be deleted and the
                credential with the new name created.
            </value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.Description">
            <summary>
                Gets or sets the description.
            </summary>
            <value>
                The string comment from the user that describes this credential. This member cannot be longer than
                CRED_MAX_STRING_LENGTH (256) characters.
            </value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.LastWriteTime">
            <summary>
                Gets the last write time.
            </summary>
            <value>The last write time.</value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.LastWriteTimeUtc">
            <summary>
                Gets the last write time UTC.
            </summary>
            <value>The last write time UTC.</value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.Type">
            <summary>
                Gets or sets the type.
            </summary>
            <value>The type of the credential. This member cannot be changed after the credential is created.</value>
        </member>
        <member name="P:PSWindowsUpdate.Credential.PersistenceType">
            <summary>
                Gets or sets the type of the persistence.
            </summary>
            <value>Defines the persistence of this credential. This member can be read and written.</value>
        </member>
        <member name="M:PSWindowsUpdate.Credential.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.Credential.Finalize">
            <summary>
                Finalizes an instance of the <see cref="T:PSWindowsUpdate.Credential" /> class.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.Credential.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:PSWindowsUpdate.Credential.CheckNotDisposed">
            <summary>
                Ensures this instance is not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Credential object is already disposed.</exception>
        </member>
        <member name="M:PSWindowsUpdate.Credential.Save">
            <summary>
                Saves this instance.
            </summary>
            <returns><c>true</c> if credential is saved properly, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">password;The password has exceeded 512 bytes.</exception>
        </member>
        <member name="M:PSWindowsUpdate.Credential.Delete">
            <summary>
                Deletes this instance.
            </summary>
            <returns><c>true</c> if credential was deleted properly, <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Target must be specified to delete a credential.</exception>
        </member>
        <member name="M:PSWindowsUpdate.Credential.Load">
            <summary>
                Loads this instance.
            </summary>
            <returns><c>true</c> if credential is load properly, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PSWindowsUpdate.Credential.Exists">
            <summary>
                Checks if the credential with these properties exists
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Target must be specified to check existance of a credential.</exception>
        </member>
        <member name="M:PSWindowsUpdate.Credential.LoadAll">
            <summary>
                Loads all credentials
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.Credential.LoadInternal(PSWindowsUpdate.NativeMethods.CREDENTIAL)">
            <summary>
                Loads the internal.
            </summary>
            <param name="credential">The credential.</param>
        </member>
        <member name="M:PSWindowsUpdate.Credential.ToString">
            <summary>
                Loads the internal.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUServiceController.RestartService">
            <summary>
            Restart service on specific machine.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUServiceController.StopService">
            <summary>
            Stope service on specific machine.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUServiceController.StartService">
            <summary>
            Start service on specific machine.
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.PSCredMan">
            <summary>
            OutputType
            <para type="description">OutputType for credentials from Credential Manager.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.PSCredMan.Username">
            <summary>Username</summary>
        </member>
        <member name="P:PSWindowsUpdate.PSCredMan.Password">
            <summary>Password</summary>
        </member>
        <member name="P:PSWindowsUpdate.PSCredMan.Domain">
            <summary>Domain</summary>
        </member>
        <member name="T:PSWindowsUpdate.WUAPIObject">
            <summary>
            Return Windows Update API COM object.
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.WUAPIObject.ComputerName">
            <summary>ComputerName</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUAPIObject.Status">
            <summary>Status</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUAPIObject.Object">
            <summary>Object</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUAPIObject.Error">
            <summary>Error</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUAPIObject.Exception">
            <summary>Exception</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUAPIObject.Mode">
            <summary>Mode</summary>
        </member>
        <member name="T:PSWindowsUpdate.WUApiCode">
            <summary>
            Return error code description.
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.WUApiCode.HResult">
            <summary>ErrorCode in Hex</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUApiCode.Message">
            <summary>Short message</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUApiCode.Description">
            <summary>Full Description</summary>
        </member>
        <member name="P:PSWindowsUpdate.WUApiCode.CodeType">
            <summary>Type of WUApiCode</summary>
        </member>
        <member name="T:PSWindowsUpdate.ValidateDateTimeAttribute">
            <summary>
            ValidateScheduleJobAttribute
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.ValidateRecurseCycleAttribute">
            <summary>
            ValidateRecurseCycleAttribute
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.ValidateTestAttribute">
            <summary>
            ValidateTestAttribute
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.ValidateIntGt0Attribute">
            <summary>
            Int must be gt 0
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.WUTools">
            <summary>
            Universal function used in rest of PSWindowsUpdate module.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.EncryptString(System.String,System.String)">
            <summary>
            Encrypt string by key.
            </summary>
            <param name="plainText">Text to encrypt</param>
            <param name="passPhrase">Encryption key</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.DecryptString(System.String,System.String)">
            <summary>
            Decrypt string by key.
            </summary>
            <param name="cipherText">Encrypted text</param>
            <param name="passPhrase">Decryption key</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.RunReboot(System.String)">
            <summary>
            Run reboot.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.ScheduleReboot(System.String,System.DateTime)">
            <summary>
            Schedule reboot.
            </summary>
            <param name="Computer">Computer name</param>
            <param name="ScheduleReboot">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.CancelReboot(System.String)">
            <summary>
            Cancel reboot.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.IsLocalHost(System.String)">
            <summary>
            Check is computer is localhost or remotehost.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.RestartService(System.String)">
            <summary>
            Restart Windows Update service on specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.StopService(System.String,System.String)">
            <summary>
            Stope service on specific machine.
            </summary>
            <param name="Computer">Computer name</param>
            <param name="ServiceName">Service name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.StartService(System.String,System.String)">
            <summary>
            Start service on specific machine.
            </summary>
            <param name="Computer">Computer name</param>
            <param name="ServiceName">Service name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.RunProcess(System.String,System.String)">
            <summary>
            Start service on specific machine.
            </summary>
            <param name="FileName">Name of starting file</param>
            <param name="Arguments">Arguments</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.TestPing(System.String)">
            <summary>
            Test ping connection for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.ParseException(System.String,System.Exception)">
            <summary>
            Create object ServiceManager for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
            <param name="e">Current Exception</param>
        </member>
        <member name="T:PSWindowsUpdate.WUTools.HttpWebRequestMethod">
            <summary>
            Possible http web request methods
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.HttpWebRequestMethod.POST">
            <summary>Post</summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.HttpWebRequestMethod.GET">
            <summary>Get</summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.InvokeRestMethod(System.String,PSWindowsUpdate.WUTools.HttpWebRequestMethod,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            InvokeRestMethod 
            </summary>
            <param name="requestUrl">Requested url</param>
            <param name="requestMethod">Request method</param>
            <param name="requestBody">Body</param>
            <param name="requestHeaders">Headers</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetServiceManagerObj(System.String)">
            <summary>
            Create object ServiceManager for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetWUApiServiceManagerObj(System.String)">
            <summary>
            Create object ServiceManager for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetUpdateSessionObj(System.String)">
            <summary>
            Create object UpdateSession for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetWUApiUpdateSessionObj(System.String)">
            <summary>
            Create object UpdateSession for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetInstallerObj(System.String)">
            <summary>
            Create object Installer for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetWUApiInstallerObj(System.String)">
            <summary>
            Create object Installer for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetSystemInfoObj(System.String)">
            <summary>
            Create object SystemInfo for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetWUApiSystemInfoObj(System.String)">
            <summary>
            Create object SystemInfo for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetAutoUpdateObj(System.String)">
            <summary>
            Create object AutoUpdate for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetWUApiAutoUpdateObj(System.String)">
            <summary>
            Create object AutoUpdate for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetAgentInfoObj(System.String)">
            <summary>
            Create object AgentInfo for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetWUApiAgentInfoObj(System.String)">
            <summary>
            Create object AgentInfo for specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.ConvertSize(System.Decimal)">
            <summary>
            convert size to human friendly format.
            </summary>
            <param name="Size">Size in bytes</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetPSWUModule(System.String)">
            <summary>
            Get PSWindowsUpdate module version on specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.CheckPSWUModule(System.String)">
            <summary>
            Check PSWindowsUpdate module version on specific machine.
            </summary>
            <param name="Computer">Computer name</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.MinimumPSWUModule">
            <summary>
            Define minimum PSWindowsUpdate module version.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.SaveCredential(System.String,System.String)">
            <summary>
            Save Credentials to Credential Manager.
            </summary>
            <param name="Username">User name</param>
            <param name="Password">Password</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetCredential">
            <summary>
            Get credentials from Credential Manager.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.PSWUModulePath">
            <summary>
            Get PSWindowsUpdate module path.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetPSWUSettings">
            <summary>
            Get GetPSWUSettings.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.SetPSWUSettings(System.Collections.Hashtable)">
            <summary>
            Save GetPSWUSettings.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.ObjectToHtml(System.Collections.ObjectModel.Collection{System.Management.Automation.PSObject},System.Collections.ObjectModel.Collection{System.String},System.Management.Automation.PSObject,System.String)">
            <summary>
            Convert object to HTML formated table.
            </summary>
            <param name="PSObjects">Output object</param>
            <param name="PSObjectProperties">Choosed properties</param>
            <param name="CmdletInfo">Send ifno about used cmdlet</param>
            <param name="TableStyle">Format style: Table | List</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.TestMail(System.Collections.Hashtable)">
            <summary>
            test email settings.
            </summary>
            <param name="LocalPSWUSettings">Send parameters</param>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.SendMail(System.Collections.Hashtable,System.Collections.ObjectModel.Collection{System.Management.Automation.PSObject},System.Management.Automation.PSObject)">
            <summary>
            Send email report.
            </summary>
            <param name="LocalPSWUSettings">Send parameters</param>
            <param name="PSObjects">Output object</param>
            <param name="CmdletInfo">Send ifno about used cmdlet</param>
        </member>
        <member name="T:PSWindowsUpdate.WUTools.CodeType">
            <summary>
            Specifies the BuiltinUser type.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.CodeType.Success">
            <summary>
            Success stream.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.CodeType.Error">
            <summary>
            Error stream.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.CodeType.Warning">
            <summary>
            Warning stream.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.CodeType.Verbose">
            <summary>
            Verbose stream.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.CodeType.Debug">
            <summary>
            Debug stream.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.CodeType.Information">
            <summary>
            Information stream.
            </summary>
        </member>
        <member name="F:PSWindowsUpdate.WUTools.CodeType.Throw">
            <summary>
            Throw stream.
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.WUTools.GetWUApiCodeDetails(System.Int32)">
            <summary>
            Get description from error code 
            </summary>
            <param name="ErrorCode">Error code</param>
        </member>
        <member name="T:PSWindowsUpdate.RemoveWindowsUpdate">
            <summary>
            <para type="synopsis">Uninstall update.</para>
            <para type="description">Use Remove-WindowsUpdate to uninstall update.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Try to uninstall update with specific KBArticleID = KB958830.</para>
            
             Get-WUUninstall -KBArticleID KB958830
             
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.ScheduleJob">
            <summary>
            <para type="description">Specify schedule time job.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.KBArticleID">
            <summary>
            <para type="description">KBArticleID that will be uninstalled.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.UpdateID">
            <summary>
            <para type="description">Update ID that will be uninstalled.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.AutoReboot">
            <summary>
            <para type="description">Do not ask for reboot if it needed.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.IgnoreReboot">
            <summary>
            <para type="description">Do not ask for reboot if it needed, but do not reboot automaticaly.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.ScheduleReboot">
            <summary>
            <para type="description">Specify time when system will be rebooted.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.NoRestart">
            <summary>
            <para type="description">Don't use automatic reboot.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.WUSAMode">
            <summary>
            <para type="description">Wse wusa.exe instead of WU Api.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWindowsUpdate.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWindowsUpdate.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWindowsUpdate.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWindowsUpdate.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWindowsUpdate.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.RemoveWUServiceManager">
            <summary>
            <para type="synopsis">Remove windows update service manager.</para>
            <para type="description">Use Remove-WUServiceManager cmdlet to unregister Windows Update Service Manager.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Try unregister Microsoft Update Service.</para>
            
             Remove-WUServiceManager -ServiceID "7971f918-a847-4430-9279-4a52d1efe18d"
              
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Unregister Windows Update Service Manager: 7971f918-a847-4430-9279-4a52d1efe18d" on target "MG-PC".</para>
             <para></para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWUServiceManager.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWUServiceManager.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWUServiceManager.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWUServiceManager.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWUServiceManager.ScheduleJob">
            <summary>
            <para type="description">Specify schedule time job.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWUServiceManager.ServiceID">
            <summary>
            <para type="description">Specify ServiceID of Service Manager that you want to remove.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.RemoveWUServiceManager.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWUServiceManager.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWUServiceManager.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWUServiceManager.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.RemoveWUServiceManager.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.ResetWUComponents">
            <summary>
            <para type="synopsis">Reset Windows Update components.</para>
            <para type="description">Use Reset-WUComponents cmdlet to reset all Windows Update components to default.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Reset Windows Update components to default.</para>
            
             Reset-WUComponents -Verbose
             Step 1: Stop Windows Update services
            VERBOSE: Background Intelligent Transfer Service(BITS)
            VERBOSE: Windows Update(wuauserv)
            VERBOSE: Application Identity(appidsvc)
            VERBOSE: Cryptographic Services(cryptsvc)
            Step 2: Delete the qmgr*.dat files
            Step 3: Backup softare distribution folders
            VERBOSE: Renaming Software Distribution folder to C:\WINDOWS\SoftwareDistribution.bak5
            VERBOSE: Renaming CatRoot  folder to C:\WINDOWS\System32\Catroot2.bak1
            Step 4: Remove old Windows Update logs
            VERBOSE: Deleting the C:\WINDOWS\WindowsUpdate.log files.
            Step 5: Reset Windows Update services
            VERBOSE: Reset BITS service
            VERBOSE: Reset Windows Update service
            Step 6: Reregister dll's
            VERBOSE: regsvr32.exe / s atl.dll
            VERBOSE: regsvr32.exe / s urlmon.dll
            VERBOSE: regsvr32.exe / s mshtml.dll
            VERBOSE: regsvr32.exe / s shdocvw.dll
            VERBOSE: regsvr32.exe / s browseui.dll
            VERBOSE: regsvr32.exe / s jscript.dll
            VERBOSE: regsvr32.exe / s vbscript.dll
            VERBOSE: regsvr32.exe / s scrrun.dll
            VERBOSE: regsvr32.exe / s msxml.dll
            VERBOSE: regsvr32.exe / s msxml3.dll
            VERBOSE: regsvr32.exe / s msxml6.dll
            VERBOSE: regsvr32.exe / s actxprxy.dll
            VERBOSE: regsvr32.exe / s softpub.dll
            VERBOSE: regsvr32.exe / s wintrust.dll
            VERBOSE: regsvr32.exe / s dssenh.dll
            VERBOSE: regsvr32.exe / s rsaenh.dll
            VERBOSE: regsvr32.exe / s gpkcsp.dll
            VERBOSE: regsvr32.exe / s sccbase.dll
            VERBOSE: regsvr32.exe / s slbcsp.dll
            VERBOSE: regsvr32.exe / s cryptdlg.dll
            VERBOSE: regsvr32.exe / s oleaut32.dll
            VERBOSE: regsvr32.exe / s ole32.dll
            VERBOSE: regsvr32.exe / s shell32.dll
            VERBOSE: regsvr32.exe / s initpki.dll
            VERBOSE: regsvr32.exe / s wuapi.dll
            VERBOSE: regsvr32.exe / s wuaueng.dll
            VERBOSE: regsvr32.exe / s wuaueng1.dll
            VERBOSE: regsvr32.exe / s wucltui.dll
            VERBOSE: regsvr32.exe / s wups.dll
            VERBOSE: regsvr32.exe / s wups2.dll
            VERBOSE: regsvr32.exe / s wuweb.dll
            VERBOSE: regsvr32.exe / s qmgr.dll
            VERBOSE: regsvr32.exe / s qmgrprxy.dll
            VERBOSE: regsvr32.exe / s wucltux.dll
            VERBOSE: regsvr32.exe / s muweb.dll
            VERBOSE: regsvr32.exe / s wuwebv.dll
            Step 7: Reset WinSock
            VERBOSE: netsh winsock reset
            Step 8: Reset Proxy
            VERBOSE: netsh winhttp reset proxy
            Step 9: Start Windows Update services
            VERBOSE: Cryptographic Services (cryptsvc)
            VERBOSE: Application Identity (appidsvc)
            VERBOSE: Windows Update (wuauserv)
            VERBOSE: Background Intelligent Transfer Service (BITS)
            Step 10: Start Windows Update services
            VERBOSE: wuauclt /resetauthorization /detectnow
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.ResetWUComponents.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.ResetWUComponents.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.ResetWUComponents.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.ResetWUComponents.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.ResetWUComponents.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.ResetWUComponents.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.ResetWUComponents.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.ResetWUComponents.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.ResetWUComponents.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.SetPSWUSettings">
            <summary>
            <para type="synopsis">Save PSWUSettings.</para>
            <para type="description">Use Set-PSWUSettings save PSWindowsUpdate module settings to XML file.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Set Office 365 as smtp server for PSWindowsUpdate module.</para>
            
             Set-PSWUSettings -SmtpServer smtp.office365.com -SmtpPort 587 -SmtpEnableSsl $true -SmtpSubject "PSWindowsUpdate Report" -SmtpTo mgajda@psmvp.pl -SmtpFrom mgajda@psmvp.pl -SmtpCredential (Get-Credential mgajda@psmvp.pl)
              
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SmtpServer">
            <summary>
            <para type="description">Save smtp server to PSWUSettings file.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SmtpPort">
            <summary>
            <para type="description">Save smtp port to PSWUSettings file.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SmtpEnableSsl">
            <summary>
            <para type="description">Save enable ssl to PSWUSettings file.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SmtpCredential">
            <summary>
            <para type="description">Save smtp credential to Credential Manager.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SmtpTo">
            <summary>
            <para type="description">Save smtp recipient to PSWUSettings file.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SmtpFrom">
            <summary>
            <para type="description">Save smtp sernder to PSWUSettings file.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SmtpSubject">
            <summary>
            <para type="description">Save alternative message subject to PSWUSettings file.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.Properties">
            <summary>
            <para type="description">Alternative report message propertie.s</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.Style">
            <summary>
            <para type="description">Alternative report message format style.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.SaveAsSystem">
            <summary>
            <para type="description">Invoke-WUJob to save credential as system user</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetPSWUSettings.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetPSWUSettings.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetPSWUSettings.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetPSWUSettings.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetPSWUSettings.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.SetWUSettings">
            <summary>
            <para type="synopsis">Set Windows Update Client settings.</para>
            <para type="description">Use Set-WUSettings cmdlet to Set configuration of Windows Update Client.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Enable IncludeRecommendedUpdates attributes.</para>
            
             Set-WUSettings -IncludeRecommendedUpdates
              
             <para>Confirm</para>
             <para>Are you sure you want to perform this action?</para>
             <para>Performing the operation "Set Windows Update settings" on target "MG-PC".</para>
             <para>[Y] Yes[A] Yes to All  [N] No[L] No to All  [S] Suspend[?] Help (default is "Y"): Y</para>
             <para></para>
             <para>ComputerName IncludeRecommendedUpdates</para>
             <para>------------ -------------------------</para>
             <para>MG-PC        True</para>
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AcceptTrustedPublisherCerts">
            <summary>
            <para type="description">Enabled - The WSUS server distributes available signed non-Microsoft updates.</para>
            <para type="description">Disabled - The WSUS server does not distribute available signed non-Microsoft updates.</para>
            <para type="description">Supported on: At least Windows Server 2003 operating systems or Windows XP Professional with SP1, excluding Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DisableWindowsUpdateAccess">
            <summary>
            <para type="description">Disables/Enables access to Windows Update.</para>
            <para type="description">Supported on: At least Windows Server 2003 operating systems, Windows XP Professional Service Pack 1, or Windows 2000 Service Pack 3</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ElevateNonAdmins">
            <summary>
            <para type="description">This policy setting allows you to control whether non-administrative users will receive update notifications based on the "Configure Automatic Updates" policy setting.</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or At least Windows 2000 Service Pack 3 through Windows 8.1 or Windows Server 2012 R2 with most current service pack. Not supported on Windows 10 and above..</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.TargetGroup">
            <summary>
            <para type="description">Name of the computer group to which the computer belongs.</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or Windows 2000 Service Pack 3, excluding Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.TargetGroupEnabled">
            <summary>
            <para type="description">Use/Do not use client-side targeting.</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or Windows 2000 Service Pack 3, excluding Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.WUServer">
            <summary>
            <para type="description">HTTP(S) URL of the WSUS server that is used by Automatic Updates and API callers (by default).</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or Windows 2000 Service Pack 3, excluding Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.NotificationLevel">
            <summary>
            <para type="description">Notify mode: "Not configured", "Disabled", "Notify before download", "Notify before installation", "Scheduled installation", "Users configure"</para>
            <para type="description">Supported on: Windows XP Professional Service Pack 1 or At least Windows 2000 Service Pack 3 Option 7 only supported on servers of at least Windows Server 2016 edition​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AutoInstallMinorUpdates">
            <summary>
            <para type="description">Silently install minor updates.</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or At least Windows 2000 Service Pack 3 through Windows 8.1 or Windows Server 2012 R2 with most current service pack. Not supported on Windows 10 and above.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DetectionFrequency">
            <summary>
            <para type="description">Time between detection cycles. Time in hours (1–22).</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or Windows 2000 Service Pack 3, excluding Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DetectionFrequencyEnabled">
            <summary>
            <para type="description">Enable/Disable detection frequency.</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or Windows 2000 Service Pack 3, excluding Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.IncludeRecommendedUpdates">
            <summary>
            <para type="description">Enable/Disable recommended updates.</para>
            <para type="description">Supported on: At least Windows Vista through Windows 8.1 or Windows Server 2012 R2 with most current service pack. Not supported on Windows 10 and above.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.NoAutoRebootWithLoggedOnUsers">
            <summary>
            <para type="description">Logged-on user can decide whether to restart the client computer.</para>
            <para type="description">Supported on: Windows XP Professional Service Pack 1 or At least Windows 2000 Service Pack 3​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.NoAutoUpdate">
            <summary>
            <para type="description">Enable/Disable Automatic Updates.</para>
            <para type="description">Supported on: Windows XP Professional Service Pack 1 or At least Windows 2000 Service Pack 3 Option 7 only supported on servers of at least Windows Server 2016 edition​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.RebootRelaunchTimeout">
            <summary>
            <para type="description">Time between prompts for a scheduled restart. Time in minutes (1–1440).</para>
            <para type="description">Supported on: Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2003, Windows XP SP2, Windows XP SP1 , Windows 2000 SP4, Windows 2000 SP3</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.RebootRelaunchTimeoutEnabled">
            <summary>
            <para type="description">Specifies the amount of time for Automatic Updates to wait before prompting again with a scheduled restart.</para>
            <para type="description">Supported on: Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2003, Windows XP SP2, Windows XP SP1 , Windows 2000 SP4, Windows 2000 SP3</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.RebootWarningTimeout">
            <summary>
            <para type="description">Length, in minutes, of the restart warning countdown after updates have been installed that have a deadline or scheduled updates. Time in minutes (1–30).</para>
            <para type="description">Supported on: Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2003, Windows XP SP2, Windows XP SP1 , Windows 2000 SP4, Windows 2000 SP3​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.RebootWarningTimeoutEnabled">
            <summary>
            <para type="description">Enable/Disable RebootWarningTimeout.</para>
            <para type="description">Supported on: Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2003, Windows XP SP2, Windows XP SP1 , Windows 2000 SP4, Windows 2000 SP3​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ScheduledInstallDay">
            <summary>
            <para type="description">Scheduled day of install: "Every day", "Every Sunday", "Every Monday", "Every Tuesday", "Every Wednesday", "Every Thursday", ""Every Friday", "EverySaturday". Only valid if NotificationLevel (AUOptions) = "Scheduled installation"</para>
            <para type="description">Starting with Windows 8 and Windows Server 2012, ScheduledInstallationDay are not supported and will return unreliable values.If you try to modify these properties, the operation will appear to succeed but will have no effect.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ScheduledInstallTime">
            <summary>
            <para type="description">Scheduled time of install in 24-hour format(0–23).</para>
            <para type="description">Starting with Windows 8 and Windows Server 2012, ScheduledInstallTime are not supported and will return unreliable values.If you try to modify these properties, the operation will appear to succeed but will have no effect.</para>
            /// </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.UseWUServer">
            <summary>
            <para type="description">The computer gets its updates from a WSUS server or from Microsoft Update.</para>
            <para type="description">Supported on: At least Windows XP Professional Service Pack 1 or Windows 2000 Service Pack 3, excluding Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.TargetReleaseVersion">
            <summary>
            <para type="description">Enable settings for control maximum version of Feature updates.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.TargetReleaseVersionInfo">
            <summary>
            <para type="description">TargetReleaseVersionInfo allow to control maximum version of Feature updates. For example "22H2".</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ProductVersion">
            <summary>
            <para type="description">ProductVersion allow to control maximum version of Feature updates. For example "Windows 11" or "11" or "Windows 10".</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DeferFeatureUpdatesPeriodInDays">
            <summary>
            <para type="description">Enable this policy to specify when to receive Feature Updates.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DeferQualityUpdatesPeriodInDays">
            <summary>
            <para type="description">Enable this policy to specify when to receive quality updates.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DisableWUfBSafeguards">
            <summary>
            <para type="description">This policy setting specifies that a Windows Update for Business device should skip safeguards.</para>
            <para type="description">Supported on: At least Windows Server, Windows 10 Version 1903​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ManagePreviewBuilds">
            <summary>
            <para type="description">Enable this policy to manage which updates you receive prior to the update being released to the world.</para>
            <para type="description">0	Disable Preview builds.</para>
            <para type="description">1	Disable Preview builds once the next release is public.</para>
            <para type="description">2	Enable Preview builds.</para>
            <para type="description">3 (Default) Preview builds is left to user selection.</para>
            <para type="description">Supported on: At least Windows Server, Windows 10 Version 1709​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AllowAutoWindowsUpdateDownloadOverMeteredNetwork">
            <summary>
            <para type="description">Enabling this policy will automatically download updates, even over metered data connections (charges may apply).</para>
            <para type="description">Supported on: At least Windows 10 Server, Windows 10 or Windows 10 RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AlwaysAutoRebootAtScheduledTime">
            <summary>
            <para type="description">If you enable this policy, a restart timer will always begin immediately after Windows Update installs important updates, instead of first notifying users on the login screen for at least two days..</para>
            <para type="description">Supported on: At least Windows Server 2012, Windows 8 or Windows RT</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AlwaysAutoRebootAtScheduledTimeMinutes">
            <summary>
            <para type="description">The restart timer can be configured to start with any value from 15 to 180 minutes. When the timer runs out, the restart will proceed even if the PC has signed-in users.</para>
            <para type="description">Supported on: At least Windows Server 2012, Windows 8 or Windows RT​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetAutoRestartNotificationConfig">
            <summary>
            <para type="description">Specifies the type of notification used when notifying the user about a scheduled restart to install updates.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AutoRestartNotificationSchedule">
            <summary>
            <para type="description">Specifies the type of notification used when notifying the user about a scheduled restart to install updates.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetAutoRestartRequiredNotificationDismissal">
            <summary>
            <para type="description">Enable this policy to specify the method by which the auto-restart required notification is dismissed. When a restart is required to install updates, the auto-restart required notification is displayed. By default, the notification is automatically dismissed after 25 seconds.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AutoRestartRequiredNotificationDismissal">
            <summary>
            <para type="description">Enable this policy to specify the method by which the auto-restart required notification is dismissed. When a restart is required to install updates, the auto-restart required notification is displayed. By default, the notification is automatically dismissed after 25 seconds.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetRestartWarningSchd">
            <summary>
            <para type="description">Enable this policy to control when notifications are displayed to warn users about a scheduled restart for the update installation deadline.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ScheduleRestartWarning">
            <summary>
            <para type="description">Enable this policy to control when notifications are displayed to warn users about a scheduled restart for the update installation deadline. 2 Hours, 4 Hours (Default), 8 Hours, 12 Hours, 24 Hours.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ScheduleImminentRestartWarning">
            <summary>
            <para type="description">Enable this policy to control when notifications are displayed to warn users about a scheduled restart for the update installation deadline. 15 Minutes (Default), 30 Minutes or 60 Minutes.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DeferUpgrade">
            <summary>
            <para type="description">You can also choose to delay updates for up to one month. If you do not delay updates, your PC will remain up to date with security updates as they become available.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DeferUpgradePeriod">
            <summary>
            <para type="description">Allows IT Admins to specify additional upgrade delays for up to 8 months. Supported values are 0-8, which refers to the number of months to defer upgrades.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.DeferUpdatePeriod">
            <summary>
            <para type="description">Allows IT Admins to specify update delays for up to four weeks. Supported values are 0-4, which refers to the number of weeks to defer updates.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.PauseDeferrals">
            <summary>
            <para type="description">Allows IT Admins to pause updates and upgrades for up to 5 weeks.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetUpdateNotificationLevel">
            <summary>
            <para type="description">This policy allows you to define what Windows Update notifications users see. This policy doesn't control how and when updates are downloaded and installed.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.UpdateNotificationLevel">
            <summary>
            <para type="description">This policy allows you to define what Windows Update notifications users see. This policy doesn't control how and when updates are downloaded and installed.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.NoAUShutdownOption">
            <summary>
            <para type="description">This policy setting allows you to manage whether the 'Install Updates and Shut Down' option is displayed in the Shut Down Windows dialog box.</para>
            <para type="description">Supported on: Windows 7, Windows Server 2008 R2, Windows Vista, Windows XP SP2</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.AUPowerManagement">
            <summary>
            <para type="description">Specifies whether the Windows Update will use the Windows Power Management features to automatically wake up the system from sleep, if there are updates scheduled for installation.</para>
            <para type="description">Supported on: Windows Server 2008, Windows 7, Windows Vista, and Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetDisablePauseUXAccess">
            <summary>
            <para type="description">This setting allows to remove access to "Pause updates" feature. Once enabled user access to pause updates is removed.</para>
            <para type="description">Supported on: At least Windows Server, Windows 10 Version 1809</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetDisableUXWUAccess">
            <summary>
            <para type="description">This setting allows you to remove access to scan Windows Update. If you enable this setting, Windows Update scan access is removed.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.RescheduleWaitTimeEnabled">
            <summary>
            <para type="description">Specifies the amount of time for Automatic Updates to wait, following system startup, before proceeding with a scheduled installation that was missed previously.</para>
            <para type="description">Supported on: Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2003, Windows XP SP2, Windows XP SP1 , Windows 2000 SP4, Windows 2000 SP3</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.RescheduleWaitTime">
            <summary>
            <para type="description">Specifies the amount of time for Automatic Updates to wait, following system startup, before proceeding with a scheduled installation that was missed previously.</para>
            <para type="description">Supported on: Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2003, Windows XP SP2, Windows XP SP1 , Windows 2000 SP4, Windows 2000 SP3</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetActiveHoursMaxRange">
            <summary>
            <para type="description">Enable this policy to specify the maximum number of hours from the start time that users can set their active hours. The max active hours range can be set between 8 and 18 hours.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ActiveHoursMaxRange">
            <summary>
            <para type="description">Enable this policy to specify the maximum number of hours from the start time that users can set their active hours. The max active hours range can be set between 8 and 18 hours.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>        
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.UseUpdateClassPolicySource">
            <summary>
            <para type="description">When this policy is enabled, devices will receive Windows updates for the classes listed from the specified update source: either Windows Update or Windows Server Update Service.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetPolicyDrivenUpdateSourceForFeatureUpdates">
            <summary>
            <para type="description">Configure this policy to specify whether to receive Windows Feature Updates from Windows Update endpoint, managed by Windows Update for Business policies, or through your configured Windows Server Update Service (WSUS) server.</para>
            <para type="description">Supported on: At least Windows Server 2022, or Windows 10 Version 2004​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetPolicyDrivenUpdateSourceForQualityUpdates">
            <summary>
            <para type="description">Configure this policy to specify whether to receive Windows Quality Updates from Windows Update endpoint, managed by Windows Update for Business policies, or through your configured Windows Server Update Service (WSUS) server.</para>
            <para type="description">Supported on: At least Windows Server 2022, or Windows 10 Version 2004​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetPolicyDrivenUpdateSourceForDriverUpdates">
            <summary>
            <para type="description">Configure this policy to specify whether to receive Windows Driver Updates from Windows Update endpoint, managed by Windows Update for Business policies, or through your configured Windows Server Update Service (WSUS) server.</para>
            <para type="description">Supported on: At least Windows Server 2022, or Windows 10 Version 2004​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetPolicyDrivenUpdateSourceForOtherUpdates">
            <summary>
            <para type="description">Configure this policy to specify whether to receive Other Updates from Windows Update endpoint, managed by Windows Update for Business policies, or through your configured Windows Server Update Service (WSUS) server.</para>
            <para type="description">Supported on: At least Windows Server 2022, or Windows 10 Version 2004​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetActiveHours">
            <summary>
            <para type="description">If you enable this policy, the PC will not automatically restart after updates during active hours. The PC will attempt to restart outside of active hours.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ActiveHoursStart">
            <summary>
            <para type="description">If you enable this policy, the PC will not automatically restart after updates during active hours. The PC will attempt to restart outside of active hours.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.ActiveHoursEnd">
            <summary>
            <para type="description">If you enable this policy, the PC will not automatically restart after updates during active hours. The PC will attempt to restart outside of active hours.</para>
            <para type="description">Supported on: At least Windows 10 Server or Windows 10</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetAutoRestartNotificationDisable">
            <summary>
            <para type="description">This policy setting allows you to control whether users receive notifications for auto restarts for update installations including reminder and warning notifications.</para>
            <para type="description">Supported on: Windows Server 2016 through Windows Server 2022, or Windows 10​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.EnableFeaturedSoftware">
            <summary>
            <para type="description">This policy setting allows you to control whether users see detailed enhanced notification messages about featured software from the Microsoft Update service.</para>
            <para type="description">Supported on: Windows Server 2008, Windows 7, and Windows Vista​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.SetEDURestart">
            <summary>
            <para type="description">Enabling this policy for EDU devices that remain on Carts overnight will skip power checks to ensure update reboots will happen at the scheduled install time.</para>
            <para type="description">Supported on: At least Windows 10 Server, Windows 10 or Windows 10 RT​</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.SetWUSettings.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetWUSettings.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetWUSettings.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetWUSettings.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.SetWUSettings.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
        <member name="T:PSWindowsUpdate.UpdateWUModule">
            <summary>
            <para type="synopsis">Update PSWindowsUpdate module.</para>
            <para type="description">Use Use Update-WUModule cmdlet to remote update PSWindowsUpdate module.</para>
            </summary>
            <para type="link" uri="https://commandlinegeeks.wordpress.com/">Author Blog</para>
             <example>
             <code>
             <para>Update PSWindowsUpdate module from PSGallery</para>
            
             Update-WUModule -ComputerName MG-PC -Online
              
             </code>
             </example>
             <example>
             <code>
             <para>Update PSWindowsUpdate module from current serwer. Require SMB connection to destination machine.</para>
            
             Update-WUModule -ComputerName MG-PC -Local
              
             </code>
             </example>
        </member>
        <member name="P:PSWindowsUpdate.UpdateWUModule.ComputerName">
            <summary>
            <para type="description">Specify one or more computer names for remote connection.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.UpdateWUModule.Credential">
            <summary>
            <para type="description">Specify alternative credential.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.UpdateWUModule.SendReport">
            <summary>
            <para type="description">Send report email to specific recipients.</para>
            <para type="description">Requires the parameter -PSWUSettings or declare the PSWUSettings.xml file in ModuleBase path.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.UpdateWUModule.PSWUSettings">
            <summary>
            <para type="description">Required parameter for -SendReport.</para>
            <para type="description">Passes the parameters (as hashtable) necessary to send the report: 
            \r\n@{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25];[Subject="Alternative Subject"];[Properties="Alternative object properties"];[Style="Table|List"]}</para>
            <para type="description">Send parameters can also be saved to a PSWUSettings.xml file in ModuleBase path: 
            \r\nExport-Clixml @{SmtpServer="your.smtp.server";From="sender@email.address";To="recipient@email.address";[Port=25]}"</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.UpdateWUModule.Online">
            <summary>
            <para type="description">Update from PSGallery.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.UpdateWUModule.Local">
            <summary>
            <para type="description">Update from current module.</para>
            </summary>
        </member>
        <member name="P:PSWindowsUpdate.UpdateWUModule.Debuger">
            <summary>
            <para type="description">Debuger return original exceptions.</para>
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.UpdateWUModule.BeginProcessing">
            <summary>
            Begin
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.UpdateWUModule.ProcessRecord">
            <summary>
            Process
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.UpdateWUModule.EndProcessing">
            <summary>
            End
            </summary>
        </member>
        <member name="M:PSWindowsUpdate.UpdateWUModule.StopProcessing">
            <summary>
            Stop
            </summary>
        </member>
    </members>
</doc>
